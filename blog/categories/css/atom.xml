<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: css | No Rest For The Weekend]]></title>
  <link href="http://blog.norestfortheweekend.com/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://blog.norestfortheweekend.com/"/>
  <updated>2013-08-18T17:07:08+01:00</updated>
  <id>http://blog.norestfortheweekend.com/</id>
  <author>
    <name><![CDATA[Mark Stickley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Interviewing for CSS]]></title>
    <link href="http://blog.norestfortheweekend.com/blog/2013/01/31/interviewing-for-css/"/>
    <updated>2013-01-31T23:43:00+00:00</updated>
    <id>http://blog.norestfortheweekend.com/blog/2013/01/31/interviewing-for-css</id>
    <content type="html"><![CDATA[<p>One day in my previous job I was kind of dropped in it when my boss asked me at about 5pm to interview a potential new recruit at 11am the next day. I’d never been on that side of the table in an interview before. Considering how long I had got to prepare I was understandably a little nervous - and for good reason. When you’re interviewing, not only do you have to display an excellent knowledge of the topics you are discussing but you also have to assess whether the person you are talking to possesses that same knowledge. If you do not do this well you are either rejecting a good candidate (which is bad) or hiring a bad one (which is worse).</p>

<p>I was told that the role was for a short contract and the successful candidate would be showing a little love to our badly neglected CSS, both tidying it up while also making sure the styles were rendering accurately according to the designs (plus a few extra tweaks here and there). So basically they had to be fluent in CSS-ese.</p>

<h2 id="twitter-saves-the-day-again">Twitter saves the day again</h2>

<p>When faced with a daunting task such as this, I did what any other self-respecting geek would do and turned to the all-knowing masses on Twitter.</p>

<p>Some brilliant people came to my rescue almost immediately and here are their responses:</p>

<!-- "spell 'specificity' (and then explain it...)" -@rich13 -->
<p>{% tweet https://twitter.com/rich13/status/200628477991464961 %}</p>

<p>I like this one because it’s really getting back to basics. Not only do you have to know that specificity exists but you have to understand what it does and how it does it. The spelling part is a bit of fun - hopefully the candidate will understand that that’s not the important part! Here’s <a href="http://css-tricks.com/specifics-on-css-specificity/">an article on CSS specificity</a> if you need a refresher.</p>

<!-- I got asked the difference between display:none; and visibility:hidden -@mfujica -->
<p>{% tweet https://twitter.com/mfujica/status/200629821737406465 %}</p>

<p>This is a nice one as well. It checks that they have some understanding about how the document flow works. You could follow this question up by asking if they know any other ways of hiding content and why they might want to do it that way instead.</p>

<p>The answer, of course, is that <code>display: none</code> removes the element from the document flow while <code>visibility: hidden</code> does not. Another way of hiding content (which is good for accessibility as it doesn’t hide it from screen readers) is by using a negative margin. There are various drawbacks and other ways of achieveing this which might also be a good thing to discuss.</p>

<!-- What is the default position of an element? -@mfujica -->
<p>{% tweet https://twitter.com/mfujica/status/200630440720220160 %}</p>

<p>It is <code>static</code>. But it’s not the most well-known property as normally we are changing the position <em>from</em> <code>static</code> <em>to</em> something else, like <code>relative</code> or <code>fixed</code>.</p>

<!-- Explaning what inline-block is also should be a good -@mfujica -->
<p>{% tweet https://twitter.com/mfujica/status/200631684956299266 %}</p>

<p><code>inline-block</code> has only really been useful since IE started supporting it properly (around v8) and so while it’s very handy, not everyone has used it.</p>

<p>An element with <code>display: inline-block</code> flows in the document like an inline element but allows you to apply styles to it that normally only apply to block-level elements such as <code>margin</code>, <code>width</code> and <code>height</code>.</p>

<!-- what is CSS3? Draw an arrow head using borders. -@ralfas -->
<p>{% tweet https://twitter.com/ralfas/status/200843040892518400 %}</p>

<p>I expect most candidates would ask for clarification or look confused at the first part of that question. That’s fine, seeing their reaction allows you to gauge the way they might react to a poorly defined spec, for example. It’s kind of open ended so they might simply say “It’s the latest version of CSS”. Others may list a few new features. If they’re really smart they’ll tell you that CSS3 hasn’t been formally specified because it’s still in development.</p>

<p>Drawing an arrowhead with borders requires the knowledge that when fat borders meet on adjacent edges they form a diagonal. Check out <a href="http://www.yuiblog.com/blog/2010/11/22/css-quick-tip-css-arrows-and-shapes-without-markup/">this article</a> for more details. Alternatively you can ask them to <a href="/blog/2012/07/11/zero-image-close-buttons/">create a close button with pure CSS</a> if you’re feeling mean!</p>

<!-- @markstickley @mfujica just make sure you know the answers yourself... -@timblair -->
<p>{% tweet https://twitter.com/timblair/status/200633510950748161 %}</p>

<p>Yep :)</p>

<h2 id="other-ideas">Other ideas</h2>

<h3 id="vendor-prefixes">Vendor prefixes</h3>

<p>I quite like an open ended question, particularly if it calls for some opinion. A lot of this industry is based on facts and rigid concepts that are either right or wrong so hearing someone’s opinion and their ability to express it well could be the difference between a hire and a no-hire.</p>

<p>Simply ask them to explain vendor prefixes, what they’re for and importantly whether they think they are a good idea, making sure to push them for both positive and negative points).</p>

<h3 id="box-model">Box model</h3>

<p>Get them to explain <a href="https://developer.mozilla.org/en-US/docs/CSS/box_model">the box model</a> to you. You’re looking for a good understanding of the different parts that come into play, particularly how it can affect how wide an element will be (and how it won’t always be the same width as its <code>width</code> value). This conversation can then lead onto <a href="https://developer.mozilla.org/en-US/docs/CSS/box-sizing">the <code>box-sizing</code> property</a> introduced in CSS3. See if they know the default value for all element (<code>content-box</code>) and for bonus points see if they know which mode IE uses in Quirks Mode (<code>border-box</code>).</p>

<h3 id="scss">SCSS</h3>

<p>Of course these days CSS isn’t quite as static as it used to be with code generators like <a href="http://sass-lang.com/">Sass</a> and <a href="http://lesscss.org/">less</a> becoming more and more popular. You can ask if they know about these technologies (and what they think of them). If you’re using one in your business, you should probably have a few specific questions about it as well ;)</p>

<p>In favour of CSS generation, it is nice to be able to use a <abbr title="Don't Repeat Yourself">DRY</abbr> methodology through mixins and inheritance, and it’s even better to be able to define things once and use them many times throughout the document (like colours). Against it, the code generated can be quite verbose and it’s typically hard to debug as looking at the compiled code gives you no indication where a rule exists (or was generated from) in the source.</p>

<h3 id="implement-something-with-no-classes-or-ids">Implement {something} with no classes or ids</h3>

<p>Finally, get them to code up some HTML and CSS for a small interface element (Eg. a tweet (including all the meta data around it)) but do it <strong>without using classes or ids</strong>. Ask them to use HTML5 and to use semantically relevant tags.</p>

<p>This task can take a while but it shows a lot about their thinking process.</p>

<ul>
  <li>It shows they have a knowledge of HTML5 tags and semantic markup</li>
  <li>It forces them to improvise with the use of CSS selectors</li>
</ul>

<p>There are many under-used selectors out there which would be perfect for this sort of task. Just <a href="http://www.w3.org/TR/selectors/#selectors">look at them</a>! Do you know all of them? I know I don’t, certainly not without looking. If you really wanted to test just their CSS skills then you could write the HTML for them in a way that would force them to use specific selectors. The sky really is the limit here… get creative!</p>

<h2 id="any-more">Any more?</h2>

<p>If you’ve got any favourites (and I’m sure you have, whether they’re questions you use or have had used on you), please stick them in the comments. I’d be really interested to hear them!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zero image close buttons]]></title>
    <link href="http://blog.norestfortheweekend.com/blog/2012/07/11/zero-image-close-buttons/"/>
    <updated>2012-07-11T15:06:00+01:00</updated>
    <id>http://blog.norestfortheweekend.com/blog/2012/07/11/zero-image-close-buttons</id>
    <content type="html"><![CDATA[<p>While I was <a href="http://en.wiktionary.org/wiki/yak_shaving#Noun">shaving yaks</a> recently, I came across and interface element in our product: a tiny button that removed an item from a list. The button was just a simple circle with an X through it.</p>

<p>Originally it had been created by hiding the text of a link, using the <code>:before</code> selector and the <code>content</code> property to add an X and then styling it. It wasn’t ideal because it never really lined up properly, especially when the font size changed and <em>especially</em> if the font family was changed. I wanted to find a better way.</p>

<h2 id="using-a-gradient-as-a-gradient-is-so-overrated">Using a gradient as a gradient is so overrated</h2>

<p>You can create a much better X with a few gradients! In fact, gradient backgrounds, multiple background images and rounded corners give you pretty much all the tools you need to create the <strong>best X button ever</strong>. You just have to realise that just because it’s called a gradient it doesn’t have to look like one.</p>

<p>There are two ways of doing this, but I’ll start with the simplest. Let’s deconstruct our button:</p>

<p>{% img center /images/posts/2012/07/11/zero-image-close-buttons/simple-breakdown.png 514 195 ‘The X is just two lines’ %}</p>

<p>As a single linear gradient can only make lines parallel to each other, we need to make two lines by using two gradients.</p>

<p>By placing two colour stops of differing colours right next to each other we create a solid transition between colours instead of a gradient.</p>

<p><code>css CSS
a.close{
    background-image: linear-gradient(135deg, rgba(0,0,0,0) 0%,rgba(0,0,0,0) 41.5%,rgba(0,0,0,1) 41.5%,rgba(0,0,0,1) 58.5%,rgba(0,0,0,0) 58.5%,rgba(0,0,0,0) 100%),
                      linear-gradient(45deg, rgba(0,0,0,0) 0%,rgba(0,0,0,0) 41.5%,rgba(0,0,0,1) 41.5%,rgba(0,0,0,1) 58.5%,rgba(0,0,0,0) 58.5%,rgba(0,0,0,0) 100%);
}
</code>
You can <a href="/demos/zero-image-close-buttons/simple.html">see it in action</a> and also check the source for the full gamut of vendor extensions.</p>

<h2 id="adding-pzazz">Adding pzazz</h2>

<p>We can make our close button look a lot like the <a href="https://www.google.co.uk/search?q=x+men+logo&amp;tbm=isch">X-Men logo</a> by adding a couple of lines of extra CSS. I added a hover state as well just for kicks:</p>

<p>``` css CSS
a.close{
    background-image: linear-gradient(135deg, rgba(0,0,0,0) 0%,rgba(0,0,0,0) 41.5%,rgba(0,0,0,1) 41.5%,rgba(0,0,0,1) 58.5%,rgba(0,0,0,0) 58.5%,rgba(0,0,0,0) 100%),
                      linear-gradient(45deg, rgba(0,0,0,0) 0%,rgba(0,0,0,0) 41.5%,rgba(0,0,0,1) 41.5%,rgba(0,0,0,1) 58.5%,rgba(0,0,0,0) 58.5%,rgba(0,0,0,0) 100%);</p>

<pre><code>border: 3px solid black;
border-radius: 5px; } a.close:hover{
background-color: rgba(0,0,0,0.1); } ``` [See it in action here](/demos/zero-image-close-buttons/simple-with-border.html).
</code></pre>

<h2 id="the-next-level">The next level</h2>

<p>The above approach is a bit limited. A couple of problems:</p>

<ul>
  <li>It’s easy to change the background or to leave it transparent, BUT what if we want the background to have a solid colour and have the X transparent, letting the colour or image behind show through? It doesn’t work.</li>
  <li>With one line of the X overlaid on the other it would be impossible to give the lines of the X a gradient with any kind of rotational symmetry.</li>
</ul>

<p>Both these problems can be solved by deconstructing the X a little further:</p>

<p>{% img center /images/posts/2012/07/11/zero-image-close-buttons/advanced-breakdown.png 200 200 ‘The X is four lines joining at the centre’ %}</p>

<p>This means as well as creating four gradients we must also give them each different positions within the element they apply to.</p>

<p>``` css CSS
a.close{
    background-image: linear-gradient(135deg, rgba(0,0,0,0) 0%,rgba(0,0,0,0) 33%,rgba(0,0,0,1) 33%,rgba(0,0,0,1) 67%,rgba(0,0,0,0) 67%,rgba(0,0,0,0) 100%),
                      linear-gradient(45deg, rgba(0,0,0,0) 0%,rgba(0,0,0,0) 33%,rgba(0,0,0,1) 33%,rgba(0,0,0,1) 67%,rgba(0,0,0,0) 67%,rgba(0,0,0,0) 100%),
                      linear-gradient(135deg, rgba(0,0,0,0) 0%,rgba(0,0,0,0) 33%,rgba(0,0,0,1) 33%,rgba(0,0,0,1) 67%,rgba(0,0,0,0) 67%,rgba(0,0,0,0) 100%),
                      linear-gradient(45deg, rgba(0,0,0,0) 0%,rgba(0,0,0,0) 33%,rgba(0,0,0,1) 33%,rgba(0,0,0,1) 67%,rgba(0,0,0,0) 67%,rgba(0,0,0,0) 100%);</p>

<pre><code>background-size: 50%;
background-repeat: no-repeat;
background-position: right top, left top, left bottom, right bottom; } ```
</code></pre>

<p><a href="/demos/zero-image-close-buttons/advanced.html">See it</a>! (Yes, it looks the same as the first one).</p>

<h2 id="thats-a-bit-fancy">That’s a bit fancy</h2>

<p>Now that each ‘spoke’ of the X is created by a separate gradient, we can get super-fancy and create effects like <a href="/demos/zero-image-close-buttons/fancy1.html">this</a>, <a href="/demos/zero-image-close-buttons/fancy2.html">this</a> and <a href="/demos/zero-image-close-buttons/fancy3.html">this</a>.</p>

<h2 id="getting-sassy">Getting SASSy</h2>

<p>It only seems right that all this goodness should be rolled into a simple-to-use SCSS mixin. Copy and paste this code and create close buttons as easily as typing <code>@include XBackground($foreground: white, $background: gray, $width: 34%)</code> (adding your own <code>border</code> and <code>border-radius</code> as required).</p>

<p>``` scss SCSS
@mixin XBackground($foreground, $background, $width) {
    $stop1: 50% - ($width / 2);
    $stop2: 50% + ($width / 2);</p>

<pre><code>background-image: -moz-linear-gradient(-45deg, $background 0%, $background $stop1, $foreground $stop1, $foreground $stop2, $background $stop2, $background 100%), -moz-linear-gradient(45deg, $background 0%, $background $stop1, $foreground $stop1, $foreground $stop2, $background $stop2, $background 100%),-moz-linear-gradient(-45deg, $background 0%, $background $stop1, $foreground $stop1, $foreground $stop2, $background $stop2, $background 100%), -moz-linear-gradient(45deg, $background 0%, $background $stop1, $foreground $stop1, $foreground $stop2, $background $stop2, $background 100%);
background-image: -webkit-gradient(linear, left top, right bottom, color-stop(0%,$background), color-stop($stop1,$background), color-stop($stop1,$foreground), color-stop($stop2,$foreground), color-stop($stop2,$background), color-stop(100%,$background)), -webkit-gradient(linear, right top, left bottom, color-stop(0%,$background), color-stop($stop1,$background), color-stop($stop1,$foreground), color-stop($stop2,$foreground), color-stop($stop2,$background), color-stop(100%,$background)),-webkit-gradient(linear, left top, right bottom, color-stop(0%,$background), color-stop($stop1,$background), color-stop($stop1,$foreground), color-stop($stop2,$foreground), color-stop($stop2,$background), color-stop(100%,$background)), -webkit-gradient(linear, right top, left bottom, color-stop(0%,$background), color-stop($stop1,$background), color-stop($stop1,$foreground), color-stop($stop2,$foreground), color-stop($stop2,$background), color-stop(100%,$background));
background-image: -webkit-linear-gradient(-45deg, $background 0%,$background $stop1,$foreground $stop1,$foreground $stop2,$background $stop2,$background 100%), -webkit-linear-gradient(45deg, $background 0%,$background $stop1,$foreground $stop1,$foreground $stop2,$background $stop2,$background 100%),-webkit-linear-gradient(-45deg, $background 0%,$background $stop1,$foreground $stop1,$foreground $stop2,$background $stop2,$background 100%), -webkit-linear-gradient(45deg, $background 0%,$background $stop1,$foreground $stop1,$foreground $stop2,$background $stop2,$background 100%);
background-image: -o-linear-gradient(-45deg, $background 0%,$background $stop1,$foreground $stop1,$foreground $stop2,$background $stop2,$background 100%), -o-linear-gradient(45deg, $background 0%,$background $stop1,$foreground $stop1,$foreground $stop2,$background $stop2,$background 100%),-o-linear-gradient(-45deg, $background 0%,$background $stop1,$foreground $stop1,$foreground $stop2,$background $stop2,$background 100%), -o-linear-gradient(45deg, $background 0%,$background $stop1,$foreground $stop1,$foreground $stop2,$background $stop2,$background 100%);
background-image: -ms-linear-gradient(-45deg, $background 0%,$background $stop1,$foreground $stop1,$foreground $stop2,$background $stop2,$background 100%), -ms-linear-gradient(45deg, $background 0%,$background $stop1,$foreground $stop1,$foreground $stop2,$background $stop2,$background 100%),-ms-linear-gradient(-45deg, $background 0%,$background $stop1,$foreground $stop1,$foreground $stop2,$background $stop2,$background 100%), -ms-linear-gradient(45deg, $background 0%,$background $stop1,$foreground $stop1,$foreground $stop2,$background $stop2,$background 100%);
background-image: linear-gradient(135deg, $background 0%,$background $stop1,$foreground $stop1,$foreground $stop2,$background $stop2,$background 100%), linear-gradient(45deg, $background 0%,$background $stop1,$foreground $stop1,$foreground $stop2,$background $stop2,$background 100%),linear-gradient(135deg, $background 0%,$background $stop1,$foreground $stop1,$foreground $stop2,$background $stop2,$background 100%), linear-gradient(45deg, $background 0%,$background $stop1,$foreground $stop1,$foreground $stop2,$background $stop2,$background 100%);

background-size: 50%;
background-repeat: no-repeat;
background-position: right top, left top, left bottom, right bottom; } ```
</code></pre>

<h2 id="vendor-schmendor">Vendor schmendor</h2>

<p>Looking again at <a href="/demos/zero-image-close-buttons/advanced.html">the CSS of the more advanced solution</a>, it turns out that there’s quite a lot of it. This is thanks to all the variations and vendor prefixes we have to use (THANKS FOR THAT VENDORS).</p>

<p>Of course another way we could do this is just to use an image. <em>Old school</em>. We can base64 encode and include it directly in the CSS. While doing that makes it a little larger than a separate file it cuts out the overhead of an extra request so it should be quicker overall.</p>

<p><a href="/demos/zero-image-close-buttons/base64.html">Here</a>’s the base64 version in action. View source and you’ll see that it’s a lot smaller (about half the size) of the gradient-based solution. The gradient version will scale to any size but if you use it at a fixed size is it worth the extra bandwidth?</p>

<p>Fortunately you don’t need to make that choice! Here’s a handy little chart explaining why:</p>

<table class="display">
	<thead>
		<tr>
			<td class="unused"></td>
			<th>Chars</th>
			<th>Uncompressed</th>
			<th>Gzipped</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<th>Gradients</th>
			<td>3969</td>
			<td>3.84KB</td>
			<td>313 bytes</td>
		</tr>
		<tr>
			<th>Base64 image</th>
			<td>1961</td>
			<td>1.91KB</td>
			<td>1.33KB</td>
		</tr>
	</tbody>
</table>

<p>And you <em>are</em> gzipping all your stuff as you serve it, right? I thought so.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS3 gradients, multiple backgrounds and IE7]]></title>
    <link href="http://blog.norestfortheweekend.com/blog/2011/02/26/css3-gradients-multiple-backgrounds-and-ie7/"/>
    <updated>2011-02-26T17:58:02+00:00</updated>
    <id>http://blog.norestfortheweekend.com/blog/2011/02/26/css3-gradients-multiple-backgrounds-and-ie7</id>
    <content type="html"><![CDATA[<p>You know how, according to the W3C, <a href="http://www.w3.org/TR/CSS21/syndata.html#parsing-errors">CSS selectors that are not understood should be ignored, without error</a>? IE7 doesn’t do that 100% of the time.</p>

<h3 id="how-dare-it">How dare it</h3>

<p>That’s right. Just when you thought you had a nice system in place IE comes along and stomps all over it. I’m sure more and more people will come up against this as they start using CSS gradients in earnest. I can see it being quite a common situation, too. I have two background images: one, a CSS generated gradient and two, an image to be laid over the top of it. A nice shiny button with an icon, for example.</p>

<p>{% img center /images/wp-uploads/2011/02/button.png 142 38 ‘A button that says Register now and has a gradient and a separate icon for the background’ %}</p>

<p>We know that certain browsers can’t render gradients and so we define the background to initially be just a solid colour with the icon image (the users of the older browsers will never miss what they didn’t know was there). Then we go on to define the styles for the modern browsers. These styles use the same selector (<code>background-image</code>) so they will override the initial declaration but according to the rules, browsers that don’t understand the gradient instructions will just ignore the whole declaration leaving us with just the initial icon for the background.</p>

<p>As we know, the backgrounds will appear top down from the order you specify them so we specify the icon first and then the gradient, otherwise the gradient would obscure the icon.</p>

<p>We also define the background-position twice. This is so we can position the gradient+icon background differently from the icon on it’s own. Browsers that don’t support multiple backgrounds should not see this syntax as valid and should ignore it.</p>

<p>Here’s the code:</p>

<p><code>html HTML
&lt;a href="#" class="mybutton"&gt;Register now&lt;/a&gt;
</code></p>

<p>```css CSS  <br />
.mybutton{
	background-image: url(icon.png);
	background-image: url(icon.png),
		-webkit-gradient(
			linear,
			left bottom,
			left top,
			color-stop(0, rgb(233, 233, 233)),
			color-stop(0.5, rgb(249, 249, 249)),
			color-stop(0.5, rgb(255, 255, 255)),
			color-stop(1, rgb(255, 255, 255))
		);
	background-image: url(icon.png),
		-moz-linear-gradient(
			center bottom,
			rgb(233, 233, 233) 0%,
			rgb(249, 249, 249) 50%,
			rgb(255,255,255) 50%,
			rgb(255,255,255) 100%
		);</p>

<pre><code>background-position: 5px center;
background-position: 5px center, left top;

background-repeat: no-repeat;

padding-left: 30px; } ```
</code></pre>

<p>Here it is in Firefox:  </p>

<p>{% img center /images/wp-uploads/2011/02/example1-ff.png 142 38 ‘Styles are working well in Firefox’ %}</p>

<p>And in IE7:  </p>

<p>{% img center /images/wp-uploads/2011/02/example1-ie.png 142 38 ‘The icon on the button is missing in IE’ %}</p>

<p>Or you can <a href="/demos/css3-gradients-multiple-backgrounds-and-ie7/example1.html">see it for yourself in your browser</a>.</p>

<p>It seems that IE is not behaving as we might expect. It’s not showing the gradient (expected) but it’s not failing back to just showing the icon either. A quick look at the IE developer toolbar (in IE9, IE7 mode; the IE7 dev toolbar would leave you stumped) shows us why:</p>

<p>{% img center /images/wp-uploads/2011/02/example1-ie-inspector.png 692 100 ‘Screenshot of the IE developer toolbar showing that IE has picked up and is trying to use styles it can’t understand’ %}</p>

<p>It’s picked up the background image declaration that includes a gradient. In this case it’s the Mozilla-specific gradient and the reason it’s this one and not the Webkit one is that we are defining the Mozilla one last. If they were defined the other way around it would have picked up the Webkit one instead.</p>

<h3 id="why-oh-why">Why? Oh why??</h3>

<p>I’m no expert on how IE parses CSS but I would presume it’s something like IE recognises the URL part just fine and when it reaches the closing parenthesis it figures that’s it and all’s well. Maybe not. Whatever, for some reason it thinks it’s a valid declaration, scoops up the whole lot gradient and all and tries to render it. And fails.</p>

<h3 id="thats-annoying">That’s annoying</h3>

<p>Yes it is.</p>

<h3 id="the-fix">The fix</h3>

<p>Importantly, IE correctly recognises the <code>background-image</code> declaration as invalid (for itself) if it starts with a gradient, even if it contains a regular image later on. So we just start the declaration with a gradient. The trouble is, we don’t want to put the gradient first as it’ll obscure the icon, so we define <em>another</em> gradient that is OK to put on top of the icon. That would be an empty or transparent gradient.</p>

<p>We will use the minimum amount of code that is necessary to trigger a gradient in the rendering engine. For Webkit, it is <code>-webkit-gradient(linear, left bottom, left top)</code>. No <code>color-stop</code>s required. This is good because no colour means no visible gradient. For Mozilla, it requires some colour information, so we just give it completely transparent colours using <code>rgba</code>: <code>-moz-linear-gradient(center bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 0%)</code>.</p>

<p>Putting these gradients first mean that IE7 won’t incorrectly think it can render that style and so it’ll stick with just the icon.</p>

<p><strong>Important: Because we now have 3 background images, we also need to declare a third value for background-position.</strong></p>

<p>``` css CSS  <br />
.mybutton{
	background-image: url(icon.png);
	background-image: -webkit-gradient(linear, left bottom, left top),
		url(icon.png),
		-webkit-gradient(
			linear,
			left bottom,
			left top,
			color-stop(0, rgb(233, 233, 233)),
			color-stop(0.5, rgb(249, 249, 249)),
			color-stop(0.5, rgb(255, 255, 255)),
			color-stop(1, rgb(255, 255, 255))
		);
	background-image: -moz-linear-gradient(center bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 0%),
		url(icon.png),
		-moz-linear-gradient(
			center bottom,
			rgb(233, 233, 233) 0%,
			rgb(249, 249, 249) 50%,
			rgb(255,255,255) 50%,
			rgb(255,255,255) 100%
		);</p>

<pre><code>background-repeat: no-repeat;
background-position: 5px center;
background-position: left top, 5px center, left top;

padding-left: 30px; } ```
</code></pre>

<p>Here it is in Firefox:  </p>

<p>{% img center /images/wp-uploads/2011/02/example2-ff.png 142 38 ‘The styles are working well in Firefox’ %}</p>

<p>And in IE7:  </p>

<p>{% img center /images/wp-uploads/2011/02/example2-ie.png 142 38 ‘The styles are working well in IE7’ %}</p>

<p>Or you can <a href="/demos/css3-gradients-multiple-backgrounds-and-ie7/example2.html">see it for yourself in your browser</a>.</p>

<h3 id="but-wait-theres-more">But wait, there’s more!</h3>

<p>You thought this was over? Of course it’s not! IE9 is a heck of a lot better than previous versions but it’s still not perfect. For example, it does support multiple backgrounds but it doesn’t support CSS gradients. This means that it’ll ignore the gradients but it’ll use the <code>background-position</code> multiple background declaration we made, resulting in the icon being positioned <code>left top</code> as opposed to <code>5px center</code>.</p>

<p>{% img center /images/wp-uploads/2011/02/example2-ie9.png 142 38 ‘The styles have regressed in IE9 and the icon is incorrectly aligned’ %}</p>

<p>I tried getting around this by inserting another <code>background-image</code> defining three images (two of them transparent spacers) directly after the first <code>background-image</code> and before the first gradient:</p>

<p>``` css CSS  <br />
.mybutton{
	background-image: url(icon.png);
	background-image: url(spacer.gif),
		url(icon.png),
		url(spacer.gif);
	background-image: -webkit-gradient(linear, left bottom, left top),
		url(icon.png),
		-webkit-gradient(
			linear,
			left bottom,
			left top,
			color-stop(0, rgb(233, 233, 233)),
			color-stop(0.5, rgb(249, 249, 249)),
			color-stop(0.5, rgb(255, 255, 255)),
			color-stop(1, rgb(255, 255, 255))
		);
	background-image: -moz-linear-gradient(center bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 0%),
		url(icon.png),
		-moz-linear-gradient(
			center bottom,
			rgb(233, 233, 233) 0%,
			rgb(249, 249, 249) 50%,
			rgb(255,255,255) 50%,
			rgb(255,255,255) 100%
		);</p>

<pre><code>background-repeat: no-repeat;
background-position: 5px center;
background-position: left top, 5px center, left top;

padding-left: 30px; } ```
</code></pre>

<p>But that didn’t work as IE7 still parsed it (incorrectly) just as it did in the first instance and therefore didn’t show the icon at all. Back to square one.</p>

<p>At this point I’m sure most people are thinking</p>

<p>“Oh come on, why not just use <a href="http://www.modernizr.com/">Modernizr</a> and only apply the gradients to browsers that can use them?”</p>

<p>That’s one way of doing it, although I would rather not use JavaScript if possible. This leaves one option… go back to the original CSS and add this conditional comment in the <code>&lt;head&gt;</code>:</p>

<p><code>html Conditional Comment
&lt;!--[if IE]&gt;
    &lt;style type="text/css" media="screen"&gt;
        .mybutton{
            background-image: url(icon.png);
            background-position: 5px center;
        }
    &lt;/style&gt;
&lt;![endif]--&gt;
</code></p>

<p>As no versions of IE yet support gradients, we just reset the background to be the plain ol’ icon. Problem solved.</p>

<p>Here it is in Firefox:  </p>

<p>{% img center /images/wp-uploads/2011/02/example3-ff.png 142 38 ‘The styles are working well in Firefox’ %}</p>

<p>And in Webkit (Chrome):  </p>

<p>{% img center /images/wp-uploads/2011/02/example3-ch.png 142 38 ‘The styles are working well in Chrome’ %}</p>

<p>And in Opera:  </p>

<p>{% img center /images/wp-uploads/2011/02/example3-op.png 142 38 ‘The styles are working well in Opera’ %}</p>

<p>And in IE6:  </p>

<p>{% img center /images/wp-uploads/2011/02/example3-ie6.png 142 38 ‘The styles are working well in IE6’ %}</p>

<p>And in IE7:  </p>

<p>{% img center /images/wp-uploads/2011/02/example3-ie7.png 142 38 ‘The styles are working well in IE7’ %}</p>

<p>And in IE8:  </p>

<p>{% img center /images/wp-uploads/2011/02/example3-ie8.png 142 38 ‘The styles are working well in IE8’ %}</p>

<p>And in IE9:  </p>

<p>{% img center /images/wp-uploads/2011/02/example3-ie9.png 142 38 ‘The styles are working well in IE9’ %}</p>

<p>Or you can <a href="/demos/css3-gradients-multiple-backgrounds-and-ie7/example3.html">see it for yourself in your browser</a>.</p>

<h3 id="a-side-serving-of-gradient">A side serving of gradient</h3>

<p>You may have noticed that two of the <code>color-stop</code>s have the same percentage/distance value. This effectively give us the ability to have more than one gradient on the same element. The end result is a gradient from the top to the middle, a sudden stop and change of colour and another gradient from the middle to the bottom. It’s useful to be able to change sharply from one colour to another as well as smoothly!</p>

<h3 id="footnotes">Footnotes</h3>

<ul>
  <li>If anyone has a better solution, please get in touch in the comments or on Twitter.</li>
  <li>The images I’ve used come directly from the project I’m working on in my day job. If my employer has any objection to their use here I will of course replace them with something else. But I’m sure they won’t.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Web in 3D - the Nintendo 3DS web browser]]></title>
    <link href="http://blog.norestfortheweekend.com/blog/2011/02/14/the-web-in-3d-the-nintendo-3ds-web-browser/"/>
    <updated>2011-02-14T01:45:49+00:00</updated>
    <id>http://blog.norestfortheweekend.com/blog/2011/02/14/the-web-in-3d-the-nintendo-3ds-web-browser</id>
    <content type="html"><![CDATA[<p>Last Sunday my wife and I went and had a sneaky preview of the new games console from Nintendo: the <a href="http://www.nintendo.com/3ds">3DS</a>.</p>

<p>{% img center /images/wp-uploads/2011/02/nintendo3dswithpen.png 455 384 ‘The Nintendo 3DS’ %}</p>

<p>Let’s not beat around the bush: this is a very impressive device. It’s tricked out with all the latest technologies (or the latest applications of ‘old’ technologies, wherever you choose to draw the line). The thing people are really talking about, of course, is the 3D aspect of it. I’m sure you have read about it - the top screen is a 3D display which importantly doesn’t require glasses. I can’t stress enough how good the 3D effect looked. It felt completely natural and I didn’t find myself getting any kind of a headache or nausea like some people are worried about.</p>

<p>There were demos available of most of the functionality: Lots of games that’ll be available on launch or shortly thereafter, 3D photography, augmented reality (including the ‘reality’ part shown in 3D due to the 3D cameras on the lid - the most impressive thing for me) and street pass (Nintendo’s social discovery system). But the thing that actually holds the <em>most</em> interest for me <em>wasn’t</em> shown and indeed is barely talked about. I’m hoping that will change.</p>

<h3 id="a-complex-web">A complex web</h3>

<p>I’m talking, of course, about the web browser which will come built in to the device as part of the extensive suit of software bundled on-board.</p>

<p>*YAWN*</p>

<p>A web browser? What’s so great about that?</p>

<p>I don’t know yet because no-one is talking about it, but I’m <em>hoping</em> it will inspire (even more) innovation and creativity on the web. I’m hoping it will have some semblance of 3D integration and capability. And if not, why not? Surely this is the way the web is going. More and more devices will be 3D enabled in the near future and you can bet that if the 3DS doesn’t kick-start the 3D web some other device will. You can buy a 3D TV to put in your living room for crying out loud - this is 2011! They reckon you’ll be able to buy a <a href="http://news.bbc.co.uk/1/hi/programmes/click_online/9393762.stm">HOLOGRAPHIC 3D TV</a> in 2012. I’m all over that. And I want the web to make sure it isn’t left behind. After all, a lot of modern TVs have integrated browsers. It’s the next logical step.</p>

<h3 id="least-they-could-do">Least they could do</h3>

<p>The least I could hope for is support for 3D images displayed in web pages. The <strong>LEAST</strong>. The standard open format is <a href="http://en.wikipedia.org/wiki/Image_file_formats#MPO">.mpo</a> and fortunately <a href="http://nintendo3dsblog.com/the-3d-camera-in-the-nintendo-3ds-saves-photos-in-the-open-mpo-file-format">the same format in which the 3DS saves it’s 3D photos</a>.</p>

<p>That’s not to say you will be able to simply embed the 3D photos in your site and have them work in the 3DS’ web browser though. Think how that would look in a desktop browser… Well it probably wouldn’t show up or show a broken image.</p>

<p>No, no, no, don’t even think about making a separate site for 3D devices. I thought we were past all that. What are you going to have yet another separate site for 3D+Mobile? We want to serve one page that works on all devices.</p>

<p>The trouble is, without images having a similar failover pattern to the one available to <a href="http://dev.opera.com/articles/view/everything-you-need-to-know-about-html5-video-and-audio/">video and audio in HTML5</a>, you simply couldn’t use the image inline in your page as non-3D-enabled browsers wouldn’t recognise the format. This just proves that there are always new image formats emerging; they are not all supported by all browsers as it’s easy to assume (if you forget about IE6 and .png’s) so why should we assume that that’s the case with the markup?</p>

<p><a href="http://www.brucelawson.co.uk/2010/why-video-audio-canvas-arent-self-closing-tags/">This has been discussed by Bruce Lawson</a> and makes sense (no matter how frustrating it is). So until all browsers support the display of 3D images on 2D screens we will have to find another way.</p>

<p>The other way to include images in the page is, of course, CSS background images. This one has legs. The 3DS browser could easily respond to an @media query, something like <code>@media screen and (-3ds-min-device-spatial-dimensions: 3) { ... }</code>. Then you could alter how the page looks on a device that has 3D capabilities. Once you have the 3D background image in place you can mark it up to include a 2D version for the rest of the world:</p>

<p><code>html HTML    
&lt;div class="forest-picture"&gt;
    &lt;img src="http://blog.norestfortheweekend.com/static/img/forest-2d.jpg" alt="Pretty forest scene" height="250" width="400"&gt;&lt;/img&gt;
&lt;/div&gt;
</code></p>

<p><code>css CSS    
@media screen and (-3ds-min-device-spatial-dimensions: 3) {
    .forest-picture{
        background: transparent url(../img/forest-3d.mpo) no-repeat 0 0;
        width: 400px;
        height: 250px;
    }
    .forest-picture img{
        display: none;
    }
}
</code></p>

<p>The best of both worlds! We can dream…</p>

<h3 id="reality-check">Reality check</h3>

<p>Before we go on, I just need to make it abundantly clear (if it isn’t already) that this article is pure speculation. I don’t know if the 3DS browser supports any of this kind of stuff, but imagining the possibilities and how they might work is an interesting exercise. Oh wait, it looks like <a href="http://www.google.com/intl/en/landing/chrome/cadie/">Google has already looked into 3D browsing</a>. My mistake ;)</p>

<p>Let’s explore further down the rabbit hole…</p>

<h3 id="going-the-extra-dimension">Going the extra dimension</h3>

<p>What if we wanted to move beyond just sticking 3D images in our pages? As awesome as a 3D gallery might be, there are so many more possibilities. Imagine if the whole page could be rendered in 3D; if each element on the page had it’s own depth setting. I think the most obvious thing to do would be to push the background actually into the background giving the site content more prominence, and if you start down that road you should just be able to let your imagination carry you forwards.</p>

<p>I know what you’re thinking, and it’s what I thought at first too… why not use <code>z-index</code> for that? The reason why not is because <code>z-index</code> controls the stacking order of elements on a single plane. If you change the function of <code>z-index</code> to control depth on 3D devices, how would you re-order a group of elements sharing the same depth on a 3D page? It’s clear that we need a separate property to do that. I’m going to be bold and use <code>depth</code> in examples, for want of a better attribute name.</p>

<p>So where are we? We’ve got 3D images and the ability to assign <code>depth</code> to elements. That’s a good start, but it seems a little restricted, doesn’t it? A bunch of flat panels sitting at different depths in a 3D space. We’re not really making the most of the technology. We need to add a little style in there… style that can bridge the gap between depth-levels. Fortunately, Webkit is one step ahead of this game with it’s <a href="http://webkit.org/blog/386/3d-transforms/">CSS 3D transforms</a>. These could easily be adapted to show in real 3D instead of 3D rendered in 2D.</p>

<h4 id="curves-would-be-nice">Curves would be nice</h4>

<p>Yes they would, and so would a mansion on the beach in Barbados. We don’t even have the ability to define curves in 2D CSS yet. But then in 2D we might not have wanted to do crazy things like making a callout or title bow inwards or outwards, which would work pretty well in 3D. But maybe just one step at a time…</p>

<h3 id="what-is-3d-anyway">What is 3D anyway</h3>

<p>To develop in 3D you need to understand how it really works. Fortunately understanding it is a lot simpler than getting your head around designing and developing in it:</p>

<p><strong>3D works by each of your eyes seeing a slightly different image.</strong></p>

<p>Simple enough, and in real life this works pretty well. But when generating your own 3D content you have to be ever-mindful of it.</p>

<h3 id="mind-the-gaps">Mind the gaps</h3>

<p>Imagine a blank page. You make the background a fetching pinkish sort of red colour and set the <code>depth</code> to be way back in the distance. </p>

<p>{% img center /images/wp-uploads/2011/02/demo1.png 628 312 ‘3DS Screen showing plain background’ %}</p>

<p>You then have a look at it and wonder why it doesn’t look like it’s way off in the distance. You check to see that your 3D depth slider is turned all the way up and when you find that it is you’re left feeling a little confused.</p>

<p>The reason why this doesn’t appear to be in the background is because your eyes are seeing the exact same image. There needs to be some more detail in there before your eyes can be tricked into thinking that it’s way off in the distance. Here are some suggestions:</p>

<ol>
  <li>You could give it a border that makes it look like you’re looking into a box. Of course the edges of the border would need to be firmly in the foreground for it to work.</li>
</ol>

<p>{% img center /images/wp-uploads/2011/02/demo2.png 628 312 ‘3DS screen showing a background shaded to look like you are looking into a box’ %}</p>

<ol>
  <li>You could give it a pattern or image. Beware with repeating patterns though: looking at 3D images forces your eyes to cross slightly and a repeating pattern could cause you to think it’s not at the depth you intended.</li>
</ol>

<p>{% img center /images/wp-uploads/2011/02/demo3.png 628 312 ‘3DS screen with a patterned background’ %}</p>

<ol>
  <li>Lay something else on top of it with a higher <code>depth</code>. For demonstration purposes I’m going to go with this one.</li>
</ol>

<p>{% img center /images/wp-uploads/2011/02/demo4.png 628 312 ‘3DS screen with a plain background and a green tile overlayed’ %}</p>

<p>But even laying something on top like this isn’t too easy for our brains to process. Have a look what each eye would be seeing.</p>

<p>{% img center /images/wp-uploads/2011/02/demo5.png 628 312 ‘Side-by-side 3DS screens showing the difference in location of the overlaid panel for each eye’ %}</p>

<p>There’s not a great deal to differentiate these two images and while your brain knows it’s seeing different things from each eye it is struggling because there are things missing that it’s used to. Usually when you see an object in front of another object it casts a shadow somewhere. Because they are in different locations your eyes will each see that shadow slightly differently. Also the way the object is lit and how it reflects the light could be different in each eye. To make sure we don’t give people headaches we’ll have to sort this out.</p>

<p><code>css CSS    
.floating-box{
    box-shadow: 5px 5px 5px #ccc;
}
</code></p>

<p>Now the panel has a nice drop shadow which should make it easier on the eyes and easier to see the 3D effect.</p>

<p>{% img center /images/wp-uploads/2011/02/demo6.png 628 312 ‘3DS screen with plain background and a green panel overlaid with a drop shadow’ %}</p>

<p>But how does it get rendered so that each eye sees the shadow differently?</p>

<h3 id="seeing-the-light">Seeing the light</h3>

<p>The way I see it there are two options:</p>

<ol>
  <li>The browser provides a default (override-able) light source:</li>
</ol>

<p><code>css CSS    
body{
    light-source: 25% 25% fixed;
}
</code></p>

<p><code>fixed</code> would position the light source relative to the browser viewport, and as an alternative <code>absolute</code> would position it relative to the document.</p>

<ol>
  <li>You, the developer, get granular control over what each eye sees:</li>
</ol>

<p>If you had control over each eye the possibilities would be endless. Set the difference in box shadow offset, show a different background image to achieve a rippling effect. You would OWN all the dimensions.</p>

<p><code>css CSS    
@media screen and (-3ds-min-device-spatial-dimensions: 3) and (-3ds-perspective: left-eye) {
    .floating-box{
        box-shadow: 3px 5px 5px #ccc;
    }
}
@media screen and (-3ds-min-device-spatial-dimensions: 3) and (-3ds-perspective: right-eye) {
    .floating-box{
        box-shadow: 7px 5px 5px #ccc;
    }
}
</code></p>

<p>I think a combination of both would probably be in the interests of developer and user alike.</p>

<h3 id="its-not-all-giant-blue-humanoids-and-bio-luminescent-flowers">It’s not all giant blue humanoids and bio-luminescent flowers</h3>

<p>This technology has it’s disadvantages, and you can be sure that there will be some nasty surprises out there when it comes along. As with most visual effects, subtlety is king. Of course there will always be the developers who are irresponsible with this great power and make some eye-bleeding creations, but that’s just inevitable. No, what I’m really worried about can be summed up in two words: Internet. Advertising. If you thought pop-over ads were intrusive now, you ain’t seen nothing yet.</p>

<h3 id="the-waiting-game">The waiting game</h3>

<p>Who knows what you’ll be able to do with the browser? Nintendo maybe? Or if it’s <a href="http://www.opera.com/">Opera</a> providing the software again, as they did for the Wii and original DS/DSi then I expect they will know. (Please do get in touch if you have insider knowledge!) But until that information is made available or the 3DS is in our hands we won’t know for sure. I hope it’s got at least a few fun 3D features to play with. I’m sure the full set will develop over time.</p>

<p><strong>Update:</strong> Now that the browser is available, I had a little play with it and <a href="/blog/2011/06/14/3ds-browser-revisited/">wrote down a few of my thoughts</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A little something while you wait]]></title>
    <link href="http://blog.norestfortheweekend.com/blog/2010/02/02/a-little-something-while-you-wait/"/>
    <updated>2010-02-02T00:46:59+00:00</updated>
    <id>http://blog.norestfortheweekend.com/blog/2010/02/02/a-little-something-while-you-wait</id>
    <content type="html"><![CDATA[<p>I know, I know it’s been a while since I posted. There’s one on the way, I promise!</p>

<p>While you wait for it to brew, however, why don’t you check out my inaugural post on the BBC Web Developer blog: <a href="http://www.bbc.co.uk/blogs/webdeveloper/2010/02/css-for-widgets-friends-dont-break-friends-styles.shtml">CSS for Widgets</a>.</p>

<p>Have you ever written some CSS on a page which contains other people’s stylesheets? And have you noticed that either your CSS broke their stuff or theirs messed about with yours? If you have then this post is right down your street. If you haven’t… well have a read just to make sure it never happens. </p>
]]></content>
  </entry>
  
</feed>
