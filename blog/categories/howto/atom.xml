<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: howto | No Rest For The Weekend]]></title>
  <link href="http://blog.norestfortheweekend.com/blog/categories/howto/atom.xml" rel="self"/>
  <link href="http://blog.norestfortheweekend.com/"/>
  <updated>2013-08-18T17:29:10+01:00</updated>
  <id>http://blog.norestfortheweekend.com/</id>
  <author>
    <name><![CDATA[Mark Stickley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using git to deploy your site]]></title>
    <link href="http://blog.norestfortheweekend.com/blog/2013/08/18/using-git-to-deploy-your-site/"/>
    <updated>2013-08-18T15:30:00+01:00</updated>
    <id>http://blog.norestfortheweekend.com/blog/2013/08/18/using-git-to-deploy-your-site</id>
    <content type="html"><![CDATA[<p>If you’re using git for your source control but still using FTP to publish updates to your website, you’re <em>doing it wrong</em>!</p>

<h2 id="tl-dr">TL; DR</h2>

<p>You can set up git so that you can use a single command to deploy your code to live. This post takes you through the typical steps to set this up.</p>

<h2 id="about-git">About git</h2>

<p>Git is a distributed version control system. It’s the “distributed” part that makes it useful in this situation. Git allows you to specify multiple remote repositories at addressable locations that it can sync with. To be able to use git to deploy your site, one of those remote repositories must be on the live server.</p>

<h2 id="some-assumptions">Some assumptions</h2>

<p>In order for this to work, you will need:</p>

<ul>
  <li>Code for a website under version control in git</li>
  <li>An addressable web server to which you want to deploy the website</li>
  <li>SSH access to the web server</li>
  <li>Git available on the web server</li>
</ul>

<p>I’ll go through some other steps that require you to be working on a *nix computer, but they are not essential and are really for convenience. You should be able to do this from a Windows machine without a problem.</p>

<h2 id="making-life-easier">Making life easier</h2>

<p><em>This section is optional, but it reduces hassle and increases security so why not?</em></p>

<p><strong><a href="https://kb.mediatemple.net/questions/1625/Using+an+SSH+Config+File">Use an SSH config file</a>.</strong> You can set up aliases, default parameters and security options in <code>~/.ssh/config</code>. It’s a real time saver - it basically means you don’t have to provide all the options and switches every time you sign in via SSH to your server. My host provides a jailed shell on port 2222 and for security I like to use a public key for authentication so my config file looks a little like this:</p>

<p><code>
Host mydomain.com
  Port 2222
  PreferredAuthentications publickey
</code></p>

<p><strong>Set up public key authentication.</strong> This increases security on your server by not allowing password access and by installing a certificate on your local computer means you never have to manually authenticate either (unless you choose to password protect your certificate). I won’t go through it here but if you’re interested you can <a href="http://stackoverflow.com/a/9095">learn how to do it</a>.</p>

<h2 id="server-side">Server-side</h2>

<p>Sign in via SSH to your server. You’ll start in your home directory.</p>

<p>Create a folder and initialise a new git repo inside it. You can call it what you like; I gave mine the same name as the domain. </p>

<p><code>bash
$ mkdir mydomain.com
$ cd mydomain.com/
$ git init
Initialized empty Git repository in /home/username/mydomain.com/
</code></p>

<p>A git repository and the filesystem containing the checked-out files from that repository are two different things in different locations on disk. When you push from your computer to a remote repository you will only alter what’s in the remote repository; the checked out files on the server remain unchanged. This is a problem since you need the checked-out files to be updated as well so they can be read by the web server software and served to people visiting your site. This is where <strong>git hooks</strong> come in handy.</p>

<p>Git hooks are scripts that are automatically run when certain events occur in git. In this case we want a script that checks out the latest version to run after the repo receives an update. The hook’s name is <code>post-receive</code>.</p>

<p><code>bash
$ cd .git/hooks/
$ vim post-receive
</code></p>

<p><code>post-receive</code> does not exist by default and so vim should open with a blank file. For the benefit of those not fluent in vim-ese I’ll give blow by blow instructions.</p>

<ul>
  <li>Type ‘i’ to enter Insert Mode</li>
  <li>Paste in the following code:</li>
</ul>

<p><code> bash
#!/bin/sh
GIT_WORK_TREE=../ git checkout -f
</code></p>

<ul>
  <li>Press Escape to exit Insert Mode</li>
  <li>Type ‘:’ followed by ‘w’, ‘q’, and Enter, which should (w)rite the file and (q)uit.</li>
</ul>

<p>The script we just created simply performs a <em>forced checkout</em> which makes sure the state of the checked-out files match the latest version of the repository (i.e. The version just received).</p>

<p>Now it needs to be made executable:</p>

<p><code>bash
$ chmod a+x post-receive 
</code></p>

<p>Finally, we need to configure the repository to accept incoming updates without complaining. By default it’s set up to grumble because without the git hook we just set up, the working tree (checked-out files) and the repository would be out of sync. With the git hook in place this becomes a non-issue.</p>

<p><code>bash
$ git config receive.denyCurrentBranch ignore
</code></p>

<h2 id="connecting-the-dots">Connecting the dots</h2>

<p>Now the server is ready to receive updates we need to tell the local repository about it.</p>

<p>On your local computer:</p>

<p><code>bash
$ git remote add live username@mydomain.com:mydomain.com
</code></p>

<p>This sets up the repository you just set up on your server as a ‘remote’. You can now refer to that repository as <code>live</code>.</p>

<h2 id="doing-it-live">Doing it live</h2>

<p>All that remains now is to push your site live. From your local computer:</p>

<p><code>bash
$ git push live master
</code></p>

<p>That’s it. Whenever you want to publish, from now on that’s all you need to type.</p>

<h2 id="one-more-thing">One more thing</h2>

<p>You may notice that your site isn’t showing up just yet. Log back on to your server. You can see, if you check, in the <code>mydomain.com</code> folder your latest changes are there, but we need to alter the folder that currently contains your website to point to the <code>mydomain.com</code> folder instead.</p>

<p>There will be a folder in your home directory called <code>htdocs</code>, <code>www</code> or <code>public_html</code> containing all the files that currently form your website. I’ll assume it’s called <code>public_html</code>. Make sure there’s nothing in that folder that you haven’t got backed up or that you want to keep - it’s about to be deleted!</p>

<p><code>bash
$ rm -rf public_html/
$ ln -s mydomain.com public_html
</code></p>

<p>This creates a symbolic link from <code>public_html</code> to your repository. Reload the page in your browser and you should see the version you just pushed from git.</p>

<p>Make a small change and try <code>git push live master</code> again. As soon as it has finished you should see the change on your site. Deployments, no matter how large or small, will never be a hassle again.</p>

<h2 id="a-note-on-security">A note on security</h2>

<p>If you navigate to http://mydomain.com/.git you may notice that the contents of your git repository are available for the world to see. Some reasons why you might not want this:</p>

<ul>
  <li>Your email address is probably associated with all your commits</li>
  <li>Anyone could download your repository and all of its history</li>
  <li>Your code will be public and it would be easier to find security holes in it</li>
</ul>

<p>I get around this by having all the code to be served in a subfolder of the repository, <code>htdocs</code>, and link to that instead of the main repository folder. Alternatively you could use <code>.htaccess</code> (if you’re running Apache) to block access. Just copy these lines into your <code>.htaccess</code> file:</p>

<p><code>apache
RewriteEngine On
RewriteRule ^(.*/)?\.git+ - [F,L]
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Always use www in your URLs]]></title>
    <link href="http://blog.norestfortheweekend.com/blog/2011/01/16/always-use-www-in-your-urls/"/>
    <updated>2011-01-16T19:13:03+00:00</updated>
    <id>http://blog.norestfortheweekend.com/blog/2011/01/16/always-use-www-in-your-urls</id>
    <content type="html"><![CDATA[<p>…unless you are specifically on another subdomain. </p>

<p>I’m not kidding! You need to make sure that your sites all redirect from http://yoursite.org to http://www.yoursite.org. If you’re not sure whether your sites do this, try now. Go ahead, I’ll wait.</p>

<p>You can score yourself against this list based on what you see:</p>

<ul>
  <li>Error page: <strong>NO POINTS!</strong></li>
  <li>Redirected to www.yoursite.org but to the front page instead of the page you wanted: <strong>Half a point</strong></li>
  <li>Page served, URL still has no www: <strong>1 point</strong></li>
  <li>Redirected to www.yoursite.org and to the correct page: <strong>10 points!</strong></li>
</ul>

<p>On no account should a user see an error page if they don’t type www before your URL. That’s just a horrible experience and most people will think the site is just broken and go somewhere else. No points at all.</p>

<p>It’s almost as bad if the user enters an address to a page within your site and then gets taken to the home page, even if the URL in the address bar says www. I mean at least the site doesn’t look broken but it’s still not a nice welcome. Having the www gets you half a point.</p>

<p>If the page is served irrespective of whether there is a www in the URL thats… OK. But only OK. Aside from the fact that you’ve got the same pages in two locations (not good for Google-juice) it could lead to errors. As yoursite.org and www.yoursite.org are seen as two different domains, if you have any AJAX on your site that refers specifically to www.yoursite.org it’s going to <em>fail hard</em> if the URL in the address bar doesn’t have the www. This is thanks to the cross-domain security model browsers employ. You don’t want that happening.</p>

<p>What you should be doing is simply redirecting all traffic to the root domain to the www subdomain and maintaining the rest of the URL to ensure a good experience. This is actually very easy to do:</p>

<p>Open the <code>.htaccess</code> file in the root of your site’s file structure. If it doesn’t exist, create it! You can create it on the command line, or directly on the server but Windows and OS X will object to the filename if you try and create it using the GUI. Once it’s open, add these lines to it:</p>

<p><code>apache
RewriteCond %{HTTP_HOST} ^yoursite\.org$ [NC]
RewriteRule ^(.*)$ http://www.yoursite.org/$1 [R=301,L]
</code> </p>

<p>Note that on the first line when you change the domain you need to add a slash before each dot as it’s part of a regular expression.</p>

<p>It’s that simple!</p>

<p>You have no excuse now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to stop a Mighty Mouse scroll ball sticking]]></title>
    <link href="http://blog.norestfortheweekend.com/blog/2009/10/03/how-to-stop-a-mighty-mouse-scroll-ball-sticking/"/>
    <updated>2009-10-03T14:09:09+01:00</updated>
    <id>http://blog.norestfortheweekend.com/blog/2009/10/03/how-to-stop-a-mighty-mouse-scroll-ball-sticking</id>
    <content type="html"><![CDATA[<p>Or: How to avoid paying for a replacement mouse when the sticky scroll ball proves too much to bear.</p>

<h2 id="impeccable-timing">Impeccable timing</h2>

<p>I couldn’t really have timed this better. Rumours have just started to emerge about <a href="http://www.engadget.com/2009/10/02/new-apple-bluetooth-keyboard-arrives-at-the-fcc-new-mouse-rumor/">a new mouse and keyboard from Apple</a> in time for the also-rumoured new line of iMacs to be announced at the forthcoming Apple event. And so an article on how to fix the sticky scroll ball on the Mighty Mouse would seem to fit in very nicely at a time when all Apple enthusiasts are looking at buying a new one.</p>

<p>&lt;/sarcasm&gt;</p>

<p>In fact I have been sitting on this article for over a year now but didn’t have a suitable platform to publish it on and so now, right before it fades into irrelevance, here it is.</p>

<h2 id="requirements">Requirements</h2>

<p>To perform this feat of frugality you will need:</p>

<ul>
  <li>A flat, non-scratchy object (like a plastic ruler)</li>
  <li>A small Philips screwdriver</li>
  <li>A small flat headed screwdriver</li>
  <li>Some glue that is good for plastics</li>
  <li>A certain amount of patience</li>
  <li>The ability to work with tiny objects</li>
</ul>

<p>You also might need a spirit cleaner such as methylated spirit, white spirit or surgical spirit and some paper towels.</p>

<h2 id="crack-open-the-mouse">Crack open the mouse</h2>

<p>There are no visible screws on the Mighty Mouse which makes it a pain to get into. A pain but not impossible. Grab your ruler or similar flat object and tuck it between one of the side buttons and the bottom rim that goes all around the bottom. Slide it around the edge to detach the rim from the mouse. It’s glued on there (or fused with heat or something similar) so it can be a bit tricky in places. Just go slowly and carefully and it should come off intact.</p>

<p><a href="/images/wp-uploads/2009/10/mouse01.jpg"><img class="center" src="/images/wp-uploads/2009/10/mouse01-300x224.jpg" width="300" height="224" title="‘Prising the mouse open with a ruler’" ></a></p>

<p>This is the step that made me the most nervous. Don’t worry, it’s all OK from here on! And if it makes you too nervous just remember how damn annoying that sticky scroll ball is and how you <a href="http://atlantic-drugs.net/products/accutane.htm">were</a> probably just going to chuck it away anyway.</p>

<h2 id="rimless-wonder">Rimless wonder</h2>

<p>Once you have detached the rim it should look something like this.</p>

<p><a href="/images/wp-uploads/2009/10/mouse02.jpg"><img class="center" src="/images/wp-uploads/2009/10/mouse02-224x300.jpg" width="224" height="300" title="‘The mouse with no bottom rim’" ></a></p>

<p>The bottom half is still attached to the main enclosure but not by much. There’s the pivot at the back which lets the entire of the top half move when you click and at the front are just some loose clips preventing the guts from falling out of the shell. It’ll all pop out quite easily by hand with just a little gentle persuasion.</p>

<h2 id="detach-the-wires">Detach the wires</h2>

<p>Once you have got the bottom (the battery enclosure, laser, circuit board etc.) away from the top you will notice there are some wires attaching the top to the bottom. These need to come off because it makes it a lot easier to work with.</p>

<p><a href="/images/wp-uploads/2009/10/mouse03.jpg"><img class="center" src="/images/wp-uploads/2009/10/mouse03-300x224.jpg" width="300" height="224" title="‘Disconnecting the top from the bottom of the mouse’" ></a></p>

<p>Just take your flat head screwdriver and push the black clips away from the white sockets. The ribbon wires will just slide out easily after this.</p>

<p><a href="/images/wp-uploads/2009/10/mouse04.jpg"><img class="center" src="/images/wp-uploads/2009/10/mouse04-224x300.jpg" width="224" height="300" title="‘The bottom of the mouse, wires off’" ></a></p>

<h2 id="top-up">Top-up</h2>

<p>This is the inside of the top of the mouse. Look at those crazy pickups! Somehow they can tell where your fingers are. Very clever.</p>

<p><a href="/images/wp-uploads/2009/10/mouse05.jpg"><img class="center" src="/images/wp-uploads/2009/10/mouse05-224x300.jpg" width="224" height="300" title="‘Inside the top of the mouse’" ></a></p>

<p>But we don’t care about those; that black box with the three screws is what we’re concerned with. Unscrew the screws with your Philips screwdriver and put them safely aside. This is what you’re left with.</p>

<p><a href="/images/wp-uploads/2009/10/mouse06.jpg"><img class="center" src="/images/wp-uploads/2009/10/mouse06-300x224.jpg" width="300" height="224" title="‘The scroll ball in its enclosure’" ></a></p>

<p>Very nice, but what we’re after is in that box of tricks. Fortunately the cross-shaped white lid will just pop off. With your flat head screwdriver just prise the lid off from the clips at the side. Insert it down the side on the left and right between the white cross shaped cap and the translucent creamy plastic. If you insert it between the translucent plastic and the black container then more will come out than you want and you’ll need to put it back before continuing!</p>

<p><a href="/images/wp-uploads/2009/10/mouse07.jpg"><img class="center" src="/images/wp-uploads/2009/10/mouse07-300x224.jpg" width="300" height="224" title="‘The top of the scolling enclosure removed’" ></a></p>

<p>Here’s the problem! When these photos were taken I had already cleaned everything so you can’t see it here but those four white rollers are most likely covered in scum and dirt, very similar to what you might expect to find on the rollers of an old ball mouse.</p>

<h2 id="cleaning-up">Cleaning up</h2>

<p>Take the ball out of the enclosure.</p>

<p><a href="/images/wp-uploads/2009/10/mouse08.jpg"><img class="center" src="/images/wp-uploads/2009/10/mouse08-300x224.jpg" width="300" height="224" title="‘The scroll enclosure without the scroll ball’" ></a></p>

<p>Now take the rollers out. Here’s what you should be looking at:</p>

<p><a href="/images/wp-uploads/2009/10/mouse09.jpg"><img class="center" src="/images/wp-uploads/2009/10/mouse09-300x224.jpg" width="300" height="224" title="‘The scroll enclosure with no ball or rollers’" ></a></p>

<p>The raised pieces of rubber underneath the rollers contain the magnetic pickups that detect when the scroll ball is being moved. Clever stuff.</p>

<p>Here are all the parts of the scroll enclosure. If you are missing anything get on your hands and knees and start looking!</p>

<p><a href="/images/wp-uploads/2009/10/mouse10.jpg"><img class="center" src="/images/wp-uploads/2009/10/mouse10-300x224.jpg" width="300" height="224" title="‘The parts of the scroll enclosure laid out’" ></a></p>

<p>Clean all the rollers. Scrape all the crud off with your fingernail. Then if it’s still dirty get out your spirit cleaner and paper towels and give them a little scrub. Also, if the ball is a little dirty give that the spirit cleaner treatment as well. It won’t hurt it!</p>

<p><a href="/images/wp-uploads/2009/10/mouse11.jpg"><img class="center" src="/images/wp-uploads/2009/10/mouse11.jpg" width="348" height="252" title="‘Close up of a roller from the scroll enclosure’" ></a></p>

<h2 id="reassembling-your-mouse">Reassembling your mouse</h2>

<p>Here’s the fiddly part. Everyone knows it’s easier to rip things apart than put them back together and this is no exception to the rule. The fiddlyest part is getting this scroll enclosure back together. This is mainly due to the rollers and getting them into position. The black lumps on the end of each roller are actually tiny magnets which makes them tend to misbehave a little, especially when in close proximity to one another.</p>

<p>The best way to get these back together is actually in the white cross-shaped lid because it has little grooves for the rollers to sit in. Place the ball in there first and then add each roller, one by one.</p>

<p><a href="/images/wp-uploads/2009/10/mouse12.jpg"><img class="center" src="/images/wp-uploads/2009/10/mouse12-300x224.jpg" width="300" height="224" title="‘Reassembling the scroll enclosure contents in the lid’" ></a></p>

<p>Make sure you add them the right way around! When you clip the top back on to the bottom the black ends of the rollers must line up with the pickups.</p>

<p>Turn the black bit with the wire still attached and quickly place it over the cross / roller / ball arrangement. Press down, making sure it’s all aligned well. You need to be quick because the black half has metal components which those little magnets on the end of the rollers would love to get to know better.</p>

<p>Once you have successfully reassembled the scroll enclosure, just reverse the process! Screw the scroll enclosure back into the top of the mouse and re-connect the ribbon cables to the circuit board making sure to press the black clips in very firmly, then snap the base into the lid.</p>

<p>All you have to do now is glue the rim back on. Make sure you don’t use too much glue in case you have to do this again! Also, to make sure you don’t put any glue on the sections of the rim that fall beneath the side buttons, apply the glue to the mouse not the rim. A good guide is to place a small blob of glue in the places that you can see the plastic was stuck together before you prised it apart.</p>

<h2 id="all-done">All done!</h2>

<p>Just wait for the glue to dry and you’re all good to go. Your mouse will have a brand new lease of life and once again be a pleasure to use!</p>
]]></content>
  </entry>
  
</feed>
