<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: html | No Rest For The Weekend]]></title>
  <link href="http://blog.norestfortheweekend.com/blog/categories/html/atom.xml" rel="self"/>
  <link href="http://blog.norestfortheweekend.com/"/>
  <updated>2012-04-29T22:37:48+01:00</updated>
  <id>http://blog.norestfortheweekend.com/</id>
  <author>
    <name><![CDATA[Mark Stickley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSS3 gradients, multiple backgrounds and IE7]]></title>
    <link href="http://blog.norestfortheweekend.com/blog/2011/02/26/css3-gradients-multiple-backgrounds-and-ie7/"/>
    <updated>2011-02-26T17:58:02+00:00</updated>
    <id>http://blog.norestfortheweekend.com/blog/2011/02/26/css3-gradients-multiple-backgrounds-and-ie7</id>
    <content type="html"><![CDATA[<p>You know how, according to the W3C, <a href="http://www.w3.org/TR/CSS21/syndata.html#parsing-errors">CSS selectors that are not understood should be ignored, [with](http://cvsmailorderpharmacy.org/buy-kamagra-oral-jelly-usa.html)out error</a>? IE7 doesn't do that 100% of the time.</p>

<h3>How dare it</h3>

<p>That's right. Just when you thought you had a nice system in place IE comes along and stomps all over it. I'm sure more and more people will come up against this as they start using CSS gradients in earnest. I can see it being quite a common situation, too. I have two background images: one, a CSS generated gradient and two, an image to be laid over the top of it. A nice shiny button with an icon, for example.</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/button.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/button.png" alt="A button that says Register now and has a gradient and a separate icon for the background" /></a></p>

<p>We know that certain browsers can't render gradients and so we define the background to initially be just a solid colour with the icon image (the users of the older browsers will never miss what they didn't know was there). Then we go on to define the styles for the modern browsers. These styles use the same selector (<code>background-image</code>) so they will override the initial declaration but according to the rules, browsers that don't understand the gradient instructions will just ignore the whole declaration leaving us with just the initial icon for the background.</p>

<p>As we know, the backgrounds will appear top down from the order you specify them so we specify the icon first and then the gradient, otherwise the gradient would obscure the icon.</p>

<p>We also define the background-position twice. This is so we can position the gradient+icon background differently from the icon on it's own. Browsers that don't support multiple backgrounds should not see this syntax as valid and should ignore it.</p>

<p>Here's the code:</p>

<pre><code>&lt;a href="#" class="mybutton"&gt;Register now&lt;/a&gt;






.mybutton{
    background-image: url(icon.png);
    background-image: url(icon.png),
        -webkit-gradient(
            linear,
            left bottom,
            left top,
            color-stop(0, rgb(233, 233, 233)),
            color-stop(0.5, rgb(249, 249, 249)),
            color-stop(0.5, rgb(255, 255, 255)),
            color-stop(1, rgb(255, 255, 255))
        );
    background-image: url(icon.png),
        -moz-linear-gradient(
            center bottom,
            rgb(233, 233, 233) 0%,
            rgb(249, 249, 249) 50%,
            rgb(255,255,255) 50%,
            rgb(255,255,255) 100%
        );

    background-position: 5px center;
    background-position: 5px center, left top;

    background-repeat: no-repeat;

    padding-left: 30px;
}
</code></pre>

<p>Here it is in Firefox:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example1-ff.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example1-ff.png" alt="Styles are working well in Firefox" /></a></p>

<p>And in IE7:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example1-ie.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example1-ie.png" alt="The icon on the button is missing in IE" /></a></p>

<p>Or you can <a href="/demos/css3-gradients-multiple-backgrounds-and-ie7/example1.html">see it for yourself in your browser</a>.</p>

<p>It seems that IE is not behaving as we might expect. It's not showing the gradient (expected) but it's not failing back to just showing the icon either. A quick look at the IE developer toolbar (in IE9, IE7 mode; the IE7 dev toolbar would leave you stumped) shows us why:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example1-ie-inspector.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example1-ie-inspector.png" alt="Screenshot of the IE developer toolbar showing that IE has picked up and is trying to use styles it can't understand" /></a></p>

<p>It's picked up the background image declaration that includes a gradient. In this case it's the Mozilla-specific gradient and the reason it's this one and not the Webkit one is that we are defining the Mozilla one last. If they were defined the other way around it would have picked up the Webkit one instead.</p>

<h3>Why? Oh why??</h3>

<p>I'm no expert on how IE parses CSS but I would presume it's something like IE recognises the URL part just fine and when it reaches the closing parenthesis it figures that's it and all's well. Maybe not. Whatever, for some reason it thinks it's a valid declaration, scoops up the whole lot gradient and all and tries to render it. And fails.</p>

<h3>That's annoying</h3>

<p>Yes it is.</p>

<h3>The fix</h3>

<p>Importantly, IE correctly recognises the <code>background-image</code> declaration as invalid (for itself) if it starts with a gradient, even if it contains a regular image later on. So we just start the declaration with a gradient. The trouble is, we don't want to put the gradient first as it'll obscure the icon, so we define <em>another</em> gradient that is OK to put on top of the icon. That would be an empty or transparent gradient.</p>

<p>We will use the minimum amount of code that is necessary to trigger a gradient in the rendering engine. For Webkit, it is <code>-webkit-gradient(linear, left bottom, left top)</code>. No <code>color-stop</code>s required. This is good because no colour means no visible gradient. For Mozilla, it requires some colour information, so we just give it completely transparent colours using <code>rgba</code>: <code>-moz-linear-gradient(center bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 0%)</code>.</p>

<p>Putting these gradients first mean that IE7 won't incorrectly think it can render that style and so it'll stick with just the icon.</p>

<p><strong>Important: Because we now have 3 background images, we also need to declare a third value for background-position.</strong></p>

<pre><code>.mybutton{
    background-image: url(icon.png);
    background-image: -webkit-gradient(linear, left bottom, left top),
        url(icon.png),
        -webkit-gradient(
            linear,
            left bottom,
            left top,
            color-stop(0, rgb(233, 233, 233)),
            color-stop(0.5, rgb(249, 249, 249)),
            color-stop(0.5, rgb(255, 255, 255)),
            color-stop(1, rgb(255, 255, 255))
        );
    background-image: -moz-linear-gradient(center bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 0%),
        url(icon.png),
        -moz-linear-gradient(
            center bottom,
            rgb(233, 233, 233) 0%,
            rgb(249, 249, 249) 50%,
            rgb(255,255,255) 50%,
            rgb(255,255,255) 100%
        );

    background-repeat: no-repeat;
    background-position: 5px center;
    background-position: left top, 5px center, left top;

    padding-left: 30px;
}
</code></pre>

<p>Here it is in Firefox:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example2-ff.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example2-ff.png" alt="The styles are working well in Firefox" /></a></p>

<p>And in IE7:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example2-ie.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example2-ie.png" alt="The styles are working well in IE7" /></a></p>

<p>Or you can <a href="/demos/css3-gradients-multiple-backgrounds-and-ie7/example2.html">see it for yourself in your browser</a>.</p>

<h3>But wait, there's more!</h3>

<p>You thought this was over? Of course it's not! IE9 is a heck of a lot better than previous versions but it's still not perfect. For example, it does support multiple backgrounds but it doesn't support CSS gradients. This means that it'll ignore the gradients but it'll use the <code>background-position</code> multiple background declaration we made, resulting in the icon being positioned <code>left top</code> as opposed to <code>5px center</code>.</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example2-ie9.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example2-ie9.png" alt="The styles have regressed in IE9 and the icon is incorrectly aligned" /></a></p>

<p>I tried getting around this by inserting another <code>background-image</code> defining three images (two of them transparent spacers) directly after the first <code>background-image</code> and before the first gradient:</p>

<pre><code>.mybutton{
    background-image: url(icon.png);
    background-image: url(spacer.gif),
        url(icon.png),
        url(spacer.gif);
    background-image: -webkit-gradient(linear, left bottom, left top),
        url(icon.png),
        -webkit-gradient(
            linear,
            left bottom,
            left top,
            color-stop(0, rgb(233, 233, 233)),
            color-stop(0.5, rgb(249, 249, 249)),
            color-stop(0.5, rgb(255, 255, 255)),
            color-stop(1, rgb(255, 255, 255))
        );
    background-image: -moz-linear-gradient(center bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 0%),
        url(icon.png),
        -moz-linear-gradient(
            center bottom,
            rgb(233, 233, 233) 0%,
            rgb(249, 249, 249) 50%,
            rgb(255,255,255) 50%,
            rgb(255,255,255) 100%
        );

    background-repeat: no-repeat;
    background-position: 5px center;
    background-position: left top, 5px center, left top;

    padding-left: 30px;
}
</code></pre>

<p>But that didn't work as IE7 still parsed it (incorrectly) just as it did in the first instance and therefore didn't show the icon at all. Back to square one.</p>

<p>At this point I'm sure most people are thinking</p>

<p>"Oh come on, why not just use <a href="http://www.modernizr.com/">Modernizr</a> and only apply the gradients to browsers that can use them?"</p>

<p>That's one way of doing it, although I would rather not use JavaScript if possible. This leaves one option... go back to the original CSS and add this conditional comment in the <code>&lt;head&gt;</code>:</p>

<p>As no versions of IE yet support gradients, we just reset the background to be the plain ol' icon. Problem solved.</p>

<p>Here it is in Firefox:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ff.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ff.png" alt="The styles are working well in Firefox" /></a></p>

<p>And in Webkit (Chrome):</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ch.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ch.png" alt="The styles are working well in Chrome" /></a></p>

<p>And in Opera:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-op.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-op.png" alt="The styles are working well in Opera" /></a></p>

<p>And in IE6:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ie6.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ie6.png" alt="The styles are working well in IE6" /></a></p>

<p>And in IE7:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ie7.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ie7.png" alt="The styles are working well in IE7" /></a></p>

<p>And in IE8:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ie8.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ie8.png" alt="The styles are working well in IE8" /></a></p>

<p>And in IE9:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ie9.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ie9.png" alt="The styles are working well in IE9" /></a></p>

<p>Or you can <a href="/demos/css3-gradients-multiple-backgrounds-and-ie7/example3.html">see it for yourself in your browser</a>.</p>

<h3>A side serving of gradient</h3>

<p>You may have noticed that two of the <code>color-stop</code>s have the same percentage/distance value. This effectively give us the ability to have more than one gradient on the same element. The end result is a gradient from the top to the middle, a sudden stop and change of colour and another gradient from the middle to the bottom. It's useful to be able to change sharply from one colour to another as well as smoothly!</p>

<ul>
<li><p>If anyone has a better solution, please get in touch in the comments or on Twitter.</p></li>
<li><p>The images I've used come directly from the project I'm working on in my day job. If my employer has any objection to their use here I will of course replace them with something else. But I'm sure they won't.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PayPal, for shame]]></title>
    <link href="http://blog.norestfortheweekend.com/blog/2009/11/28/paypal-for-shame/"/>
    <updated>2009-11-28T12:12:14+00:00</updated>
    <id>http://blog.norestfortheweekend.com/blog/2009/11/28/paypal-for-shame</id>
    <content type="html"><![CDATA[<p>[caption id="attachment_100" align="aligncenter" width="628"]<img src="http://www.norestfortheweekend.com/wp-content/uploads/2009/11/shameless.jpg" alt="Screengrab of the PayPal homepage header, the word PayPal replaced with the word ShameLess" />[/caption]</p>

<p><a href="http://www.paypal.com">PayPal</a> is, as I'm sure you know, a long-standing staple of online payment technologies. They are now merged with eBay and you pretty much can't use eBay without a PayPal account which works nicely for eBay as they are now reaping the benefit of not just the eBay selling fees but also the PayPal fees.</p>

<p>But this is not a post to lament how much money eBay/PayPal are raking in from punters.</p>

<h4>Nice and easy</h4>

<p>As well as a payment service for eBay, PayPal also offer shopping basket and checkout services for small online merchants who don't want to buy and maintain e-commerce products. It works nicely and provided you don't mind PayPal taking their cut it provides a really simple way of being able to take credit cards securely.</p>

<h4>Prepare yourself</h4>

<p>I was recently asked to add some shopping functions to a site using PayPal. Here is one of the nine code snippets PayPal provided me with to insert a button into my page:</p>

<pre><code>&lt;form action="https://www.paypal.com/cgi-bin/webscr" target="paypal" method="post"&gt;
&lt;input type="hidden" name="cmd" value="_s-xclick"&gt;
&lt;input type="hidden" name="hosted_button_id" value="xxxxxxx"&gt;
&lt;table&gt;
&lt;tr&gt;&lt;td&gt;&lt;input type="hidden" name="on0" value="Sizes"&gt;Sizes&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;select name="os0"&gt;
    &lt;option value="XXSmall"&gt;XXSmall £20.00&lt;/option&gt;
    &lt;option value="XSmall"&gt;XSmall £20.00&lt;/option&gt;
    &lt;option value="Small"&gt;Small £20.00&lt;/option&gt;
    &lt;option value="Medium"&gt;Medium £20.00&lt;/option&gt;
    &lt;option value="Large"&gt;Large £20.00&lt;/option&gt;
    &lt;option value="XLarge"&gt;XLarge £20.00&lt;/option&gt;
&lt;/select&gt; &lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;input type="hidden" name="currency_code" value="GBP"&gt;
&lt;input src="https://www.paypal.com/en_GB/i/btn/btn_cart_LG.gif" border="0" type="image" name="submit" alt="PayPal - The safer, easier way to pay online."&gt;
&lt;img src="https://www.paypal.com/en_GB/i/scr/pixel.gif" alt="" height="1" border="0" width="1"&gt;
&lt;/form&gt;
</code></pre>

<p>Oh PayPal, how do you sadden me? Let me count the ways...</p>

<h4>Spot the nastiness</h4>

<p>Well being generous, there are 7 horrible things about that above code snippet. If I count each problem every time it appears I reach a grand total of 12. Bleugh.</p>

<p>Let me run through exactly what I take issue with, because I really don't think I'm being unreasonable.</p>

<h5>Inputs</h5>

<p>There are a lot of hidden <code>input</code>s. No, I understand - they need to be there to make it work. That makes sense. What doesn't make sense is that they don't bother to close off the <code>input</code>s, XHTML style.</p>

<pre><code>&lt;input type="hidden" name="name" value="value"&gt;&lt;/input&gt;
</code></pre>

<p>Simple.</p>

<h5>Tables</h5>

<p>Really? Tables? But look at it. What does it actually do? Absolutely nothing, apart from put the text and the select side by side, which is a choice for the designer to make. No <code>tbody</code>, no <code>th</code>'s, and so there's no chance in hell of any <code>scope=</code>'s.</p>

<p>Pointless.</p>

<h5>Select with no id and no label</h5>

<p>I don't think I need to say a lot about this - the title says it all. They've put the text that should be in the label in plain text instead. They could have used the table (if they insisted on having one) to help with this by putting the label text in a th, but they didn't even do that.</p>

<h5>Input type: image</h5>

<p>Again, no problem in using an input of type image. But wait... they didn't specify the width and height! If they are going to go for a consistent look, as they appear to be doing with their tables mentioned earlier, then this is essential. Otherwise, rogue styles applied to all <code>input</code>s will seriously mess up the look of the button.</p>

<h5>Alt text</h5>

<p>Possibly the worst offender of all.</p>

<p>Check it out, aren't PayPal good? They added alt text and everything. Except the alt text is on the image input element -  the submit button -  and it isn't at all descriptive. It's basically an advert for PayPal.</p>

<p>What good is that to AT users? They would have <strong>no clue</strong> as to what that control does.</p>

<h5>Spacer gif</h5>

<p>Yes, for no apparent reason there is a spacer gif at the bottom of it all. And yes, it has no XHTML closing slash.</p>

<h5>No enclosing element</h5>

<p>Oh yes, one last one. <code>input</code> elements can't reside directly inside the <code>form</code> element. They need to be contained within any one of a variety of other elements (Eg. <code>p</code>, <code>div</code>, etc.). Sadly, there is nothing protecting our <code>input</code>s from the harsh reality of their <code>form</code> overlord.</p>

<h4>The way it <em>should</em> be</h4>

<pre><code>&lt;form action="https://www.paypal.com/cgi-bin/webscr" target="paypal" method="post"&gt;
    &lt;div&gt;
        &lt;input type="hidden" name="cmd" value="_s-xclick"&gt;&lt;/input&gt;
        &lt;input type="hidden" name="hosted_button_id" value="xxxxxxx"&gt;&lt;/input&gt;
        &lt;input type="hidden" name="on0" value="Sizes"&gt;&lt;/input&gt;
        &lt;label for="sizes-polo"&gt;Sizes&lt;/label&gt;
        &lt;select name="os0" id="sizes-polo"&gt;
            &lt;option value="XXSmall"&gt;XXSmall £20.00&lt;/option&gt;
            &lt;option value="XSmall"&gt;XSmall £20.00&lt;/option&gt;
            &lt;option value="Small"&gt;Small £20.00&lt;/option&gt;
            &lt;option value="Medium"&gt;Medium £20.00&lt;/option&gt;
            &lt;option value="Large"&gt;Large £20.00&lt;/option&gt;
            &lt;option value="XLarge"&gt;XLarge £20.00&lt;/option&gt;
        &lt;/select&gt;
        &lt;input type="hidden" name="currency_code" value="GBP"&gt;&lt;/input&gt;
        &lt;div class="controls"&gt;
            &lt;input src="https://www.paypal.com/en_GB/i/btn/btn_cart_LG.gif" name="submit" height="26" width="120" alt="Add a polo shirt in the selected size to your cart" type="image" class="image"&gt;&lt;/input&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/form&gt;
</code></pre>

<p>Much better. Notice that for the alt text I mentioned which item was being added and referenced the size select box in case they AT user might have missed that, or not made a selection yet.</p>

<h4>Why am I picking on PayPal?</h4>

<p>Well, I'm sure that many other large companies are equally guilty of this sort of thing. And as I come across them, if they enrage me enough I'm sure I'll rant about them as well. But really, PayPal should know better. They event have people coming to (and sponsor) events (like <a href="http://www.barcamp.org/">BarCamp</a>) where the attendees have a low tolerance for this sort of thing.</p>

<p>Hopefully if enough people make a fuss, these things will change. Don't tolerate it! And most of all, never blindly cut and paste markup from another site. It'll only make you look bad.
  *[AT]: Assistive Technology</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On forms, submit buttons and browsers]]></title>
    <link href="http://blog.norestfortheweekend.com/blog/2009/10/20/on-forms-submit-buttons-and-browsers/"/>
    <updated>2009-10-20T10:10:52+01:00</updated>
    <id>http://blog.norestfortheweekend.com/blog/2009/10/20/on-forms-submit-buttons-and-browsers</id>
    <content type="html"><![CDATA[<p>Aah, ambiguity! What a tricky devil you are. The <a href="http://www.w3.org">W3C</a> Recommendations are normally very specific and not at all ambiguous, but when things are left open to interpretation you can be fairly sure of varying results.</p>

<h4>Bad form, old chap</h4>

<p>Have a look at this form:</p>

<pre><code>&lt;form action="wherever.html" method="post"&gt;
    &lt;label for="firstname"&gt;First name&lt;/label&gt;
&lt;input type="text" name="firstname" id="firstname"&gt;&lt;/input&gt;
&lt;input type="submit" name="proceed" value="Proceed"&gt;&lt;/input&gt;
&lt;input type="submit" name="back" value="Back"&gt;&lt;/input&gt;
&lt;/form&gt;
</code></pre>

<p>What gets submitted when you hit Proceed? Well yes, <code>firstname</code> is included as is <code>proceed</code>, but is <code>back</code>? What gets submitted when you hit Back, as <a href="http://atlantic-drugs.net/products/accutane.htm">the</a> second submit button in the form?</p>

<p>Well the <a href="http://www.w3.org/TR/html401/interact/forms.html#submit-format">W3C Guidelines on form submission</a> say that for forms with more than one submit button, only the submit button that was pressed should be submitted. This seems fair enough.</p>

<p><strong>But what gets submitted when you press enter from within the text field?</strong></p>

<p>The W3C has no recommendation for this! The precise wording used to qualify whether a submit button gets sent along with the other form data is:</p>

<blockquote><p>If a form contains more than one submit button, only the activated submit button is successful.</p></blockquote>

<p>...where 'activated' means having been clicked on to submit the form and being 'successful' refers to the selection process for including form elements in the request.</p>

<h4>Pressing the right buttons (or not, as the case may be)</h4>

<p>What actually happens varies between browsers, which I suppose is no surprise really. The surprise is which browsers do what.</p>

<p>We see two behaviors here:</p>

<ul>
<li><p>IE (I tested 6, 7 &amp; 8) works on the basis that you only submit an <em>activated</em> form element and the only way to activate a submit button is to <em>click on it</em>. Therefore if you click on a submit button, IE will submit it's value along with the rest of the form, but if you press <em>Enter</em> to submit it doesn't submit the value of <em>any</em> submit buttons.</p></li>
<li><p>All other browsers (tested: Firefox, Safari, Chrome, Opera) submit a value for a submit button, <em>whether or not you click it</em>. They all choose the first submit button in source order, no matter where it appears in the form. Thank goodness that's consistent!</p></li>
</ul>


<p>I guess that the other browsers think it's fair to assume that pressing enter while entering data into a form is the same as clicking on the submit button, which in most cases it is. But what happens when you've got two or more submit buttons? How do you know which button the user wanted to click? How can the developer predict that, supposing they <a href="http://atlantic-drugs.net/products/bystolic.htm">even</a> know about this peculiarity? Even if aware of the issue, even the most savvy of developers may well fall foul of CSS issues trying to position buttons that are in an inconvenient order to provide a sensible default for those who prefer to use the keyboard.</p>

<p>Yes, this time <em>I think IE got it right</em>!</p>

<h4>How to fix the problem</h4>

<p>I think anyone that works with browsers will admit that we all dream of a world where they all have consistent and good behavior. But failing that, consistent behavior would be nice.</p>

<p>I'm not convinced that all the other browsers will change their behavior any time soon (even if they could be convinced that what they are doing isn't the right option) as there are probably hundreds of thousands of sites out there that will break if it changes. So the best thing to do is to 'fix' IE to behave the same.</p>

<p>Here's the code:</p>

<pre><code>&lt;form action="wherever.html" method="post"&gt;
    &lt;label for="firstname"&gt;First name&lt;/label&gt;
&lt;input type="text" name="firstname" id="firstname"&gt;&lt;/input&gt;
&lt;input type="&lt;a href='http://atlantic-drugs.net/products/accutane.htm'&gt;hidden&lt;/a&gt;" name="submit_button" value="Proceed"&gt;&lt;/input&gt;
&lt;input type="submit" name="submit_button" value="Proceed"&gt;&lt;/input&gt;
&lt;input type="submit" name="submit_button" value="Back"&gt;&lt;/input&gt;
&lt;/form&gt;
</code></pre>

<p>You'll notice I changed a few things around! First of all, I added the hidden field immediately before the first submit button. The first button is the one which acts as the default button in FF, Safari <em>et al.</em> and so we are making it do the same in IE. By adding a hidden field with the same name and value as the first button <strong>immediately before</strong> the button itself, it effectively acts as a default. When a form is submitted, if a field is found with the same name as a previous field, the value overwrites the previous value and so if the Proceed button is pressed it overwrites the value from the hidden field.</p>

<p>In IE if the user presses Enter to submit the form, neither button is pressed and the hidden field gets submitted. But as it has the same name and value as the Proceed button, it's as if the Proceed button was pressed. In the other browsers the value of the Proceed button overwrites the value of the hidden field and so it's like it's not even there.</p>

<p>That's all fine but if the Back button is clicked the hidden field will be submitted as well giving an impossible value for both the submit buttons in the same request! That's why I've also changed the name of the Back button to be the same as the name of the Proceed button - that way there will always be a value submitted for <code>submit_button</code>: either "Back" or the default "Proceed".</p>

<p><em>Notice I didn't call any of the fields "<code>submit</code>". That was intentional, and it's because if we ever want to submit the form via Javascript having a field named <code>submit</code> would make that impossible.</em></p>

<h4>But is it really a problem?</h4>

<p>That solution is a bit clunky to be honest. Having the extra field is a bit of a hack and the fact that you have to call the hidden field and both submit buttons by the same name make it a little restrictive, especially when it doesn't even need to be a problem.</p>

<p>Armed with the knowledge in this article we know that we can't rely on the values of the submit buttons to be broadcast. If we don't know which button has been clicked, we simply choose a default action and perform that unless we detect the alternative action. In PHP and for the first form it would go something like this:</p>

<pre><code>if($_SERVER['REQUEST_METHOD']=='POST'){ // if a form was submitted
    if(array_key_exists('back', $_POST)){ // if the back button was clicked
        // Perform back action
    }
    else{
        // Perform default action
    }
}
</code></pre>

<p>So long as you don't assume the button to be clicked in order to perform the default action, life will be good!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[REST For The Weekend]]></title>
    <link href="http://blog.norestfortheweekend.com/blog/2009/08/25/rest-for-the-weekend/"/>
    <updated>2009-08-25T16:05:20+01:00</updated>
    <id>http://blog.norestfortheweekend.com/blog/2009/08/25/rest-for-the-weekend</id>
    <content type="html"><![CDATA[<p>Oh well, the weekend's over again. What did you do? I got an impressive sunburn, bought some delicious fruit and veg at the market and looked into RESTful architectures, among other things. Although I would love to tell you about my culinary adventures, what I'm going to write about now is REST. It should be noted that in this case REST is not sitting in front of the TV and has nothing to do with the title of this blog, despite what you may think!</p>

<h4>What REST is not</h4>

<p>There seems to be some confusion over exactly what a RESTful architecture is. Some people think it is pretty URLs:</p>

<pre><code>http://www.mysite.com/portfolio/design/someclient
</code></pre>

<p>as opposed to:</p>

<pre><code>http://www.mysite.com/index.php?section=portfolio »
    &amp;subsection;=design&amp;client;=someclient
</code></pre>

<p>This is not RESTful.</p>

<p>Some people think REST is a bunch of actions triggered by visiting URLs:</p>

<pre><code>http://www.mysite.com/contact/email/send
</code></pre>

<p>This isn't RESTful either.</p>

<h4>Being resourceful</h4>

<p>REST stands for <strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer and it's all about resources. That is to say, data presented in a formatted way and made available at specific, addressable points of entry. Most of the time when people talk about a REST interface they will be talking about the web and URLs, but REST is not limited to this technology. So long as each resource on a system can be identified uniquely, manipulated, each request for resources includes enough information that the client knows how to process it and has the ability to contain references to other resources then it can be called RESTful.</p>

<p>A RESTful system is a stateless system; each resource request in a RESTful system should be completely independent of any other. It should not rely on cookies, session variables or any other state maintaining solutions. This is because a REST request is intended to be performed on the current state of the specified resource and the resource should be able to be encapsulated in a single response.</p>

<h4>Strict instructions</h4>

<p>It might have slipped under the radar but a couple of paragraphs above I mentioned that a REST response should include information for the client on how to process the data. In the case of a web service (and it should be assumed from here on out I'll be talking about web services) the <a href="http://en.wikipedia.org/wiki/MIME_type">MIME type</a> should be sufficient. For example, if you are serving your response up as JSON you'd want to use the <strong>MIME type</strong>: <code>application/json</code>. The <strong>MIME type</strong> is contained within the header of the response.</p>

<p>In a similar manner, the client needs to tell the server what it wants to do with the specific resource. We can do this by specifying the correct <a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods">HTTP Method</a> as part of the request.</p>

<h4>Method in madness</h4>

<p>So the HTTP methods most people are used to are: <code>GET</code> (the default method, what you get when you hit enter after typing a URL) and <code>POST</code> (the method used for submitting most forms). The others we are interested in are <code>PUT</code> and <code>DELETE</code>. Using these four methods we can instruct a RESTful interface to perform the basic CRUD operations:</p>

<ul>
<li><p><strong>C</strong>reate = <code>POST</code></p></li>
<li><p><strong>R</strong>ead = <code>GET</code></p></li>
<li><p><strong>U</strong>pdate = <code>PUT</code></p></li>
<li><p><strong>D</strong>elete = <code>DELETE</code> (rather unsurprisingly)</p></li>
</ul>


<p>Using these methods you can manipulate a resource in any way you like from that single addressable entry point. If you have the URL for the resource, in a RESTful architecture you know you won't have to append strings to the URL to make it do things (Eg <code>?action=delete</code>) - you just change the method used to request the resource in the request header.</p>

<p>Obviously if your system is externally accessible you will probably want to limit access to the 'unsafe' <code>POST</code>, <code>PUT</code> and <code>DELETE</code> methods.</p>

<h4>Not for everyone</h4>

<p>So as you can tell, REST isn't something you should strive to include just for the sake of it. I can't stress this enough: <em>there's no point in shoehorning REST into a site or project when it is not really needed</em>. The main use for it it most likely to be for Web Service APIs and anything that is highly resource driven. Think of it as a series of defined views on a database or other resource and you can't go too far wrong.</p>

<p>I am currently working on a web based file system for storing assets as part of a CMS. It has an API so that you can add, edit, read and delete assets from external locations, providing that you present the right credentials. This almost seems like the perfect application for REST as each entry - be it a file or a folder - needs to have the basic CRUD operations performed on it. The whole URL structure is basically the directory tree and every point in that tree is addressable and will accept all the different methods.</p>

<h4>Testing, testing</h4>

<p>This is all very well, but how do you go about testing these crazy HTTP methods, practically? You can't have a page full of links to click because a link is a <code>GET</code> request. There's no way of changing that.</p>

<p>Forms offer a little flexibility - you can specify the method you want to use with the method attribute. Unfortunately this is restricted to <code>GET</code> and <code>POST</code>. If you try anything other than that it will default to <code>GET</code>.</p>

<p>To test these request methods, you have to hand craft an HTTP request. You can do this in the server-side scripting language of your choice (Eg PHP, Ruby, Python etc) <em>OR</em> you can download one of the handy Firefox extensions that kindly developers have made available for nothing for this very purpose! My personal favourite is <a href="https://addons.mozilla.org/en-US/firefox/addon/9780">RESTClient</a> by <a href="http://www.porphyry.org/">Chao ZHOU</a> but there are plenty of others for you to choose from. Here are a few:</p>

<ul>
<li><p><a href="https://addons.mozilla.org/en-US/firefox/addon/2691">Poster</a> by <a href="http://www.milowski.com/">Alex Milowski</a></p></li>
<li><p><a href="https://addons.mozilla.org/en-US/firefox/addon/5946">RESTTest</a> by <a href="http://www.xucia.com/">kriszyp</a></p></li>
<li><p><a href="https://addons.mozilla.org/en-US/firefox/addon/967">Modify Headers</a> by <a href="http://www.garethhunt.com/">Gareth Hunt</a></p></li>
</ul>


<h4>Using RESTClient</h4>

<p>It's pretty simple really. The basic interface looks like this:</p>

<p>[caption id="attachment_25" align="aligncenter" width="618" caption="The RESTClient interface displays fields for method, url, header and request body along with an area in which to display the response. At the top are controls to open &amp; save your request amongst other things."]<img src="http://www.norestfortheweekend.com/wp-content/uploads/2009/08/restclient.gif" alt="The RESTClient interface displays fields for method, url, header and request body along with an area in which to display the response. At the top are controls to open &amp; save your request amongst other things." />[/caption]</p>

<ol>
<li><p>Choose your request method</p></li>
<li><p>Type the resource location</p></li>
<li><p>Add any request headers you need (this is like items from form fields)</p></li>
<li><p>Type the request body you want to transmit (this can be left blank most of the time)</p></li>
<li><p>Hit send</p></li>
</ol>


<p>What you will get back is the response as the server sends it. You can inspect the header and the body to make sure it's coming back as you'd expect and so your application that will consume the response won't get any nasty surprises!</p>

<p>Hopefully you are interested in RESTful architectures now, and are feeling inspired to go off and write one of your own!</p>

<p>For more information on this topic, check out the <a href="http://en.wikipedia.org/wiki/Representational_State_Transfer">Wikipedia article on REST</a>
  *[CRUD]: Create, Read, Update, Delete</p>
]]></content>
  </entry>
  
</feed>
