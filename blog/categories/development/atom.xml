<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | No Rest For The Weekend]]></title>
  <link href="http://blog.norestfortheweekend.com/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://blog.norestfortheweekend.com/"/>
  <updated>2013-08-18T16:23:16+01:00</updated>
  <id>http://blog.norestfortheweekend.com/</id>
  <author>
    <name><![CDATA[Mark Stickley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using git to deploy your site]]></title>
    <link href="http://blog.norestfortheweekend.com/blog/2013/08/18/using-git-to-deploy-your-site/"/>
    <updated>2013-08-18T15:30:00+01:00</updated>
    <id>http://blog.norestfortheweekend.com/blog/2013/08/18/using-git-to-deploy-your-site</id>
    <content type="html"><![CDATA[<p>If you’re using git for your source control but still using FTP to publish updates to your website, you’re <em>doing it wrong</em>!</p>

<h2 id="tl-dr">TL; DR</h2>

<p>You can set up git so that you can use a single command to deploy your code to live. This post takes you through the typical steps to set this up.</p>

<h2 id="about-git">About git</h2>

<p>Git is a distributed version control system. It’s the “distributed” part that makes it useful in this situation. Git allows you to specify multiple remote repositories at addressable locations that it can sync with. To be able to use git to deploy your site, one of those remote repositories must be on the live server.</p>

<h2 id="some-assumptions">Some assumptions</h2>

<p>In order for this to work, you will need:</p>

<ul>
  <li>Code for a website under version control in git</li>
  <li>An addressable web server to which you want to deploy the website</li>
  <li>SSH access to the web server</li>
  <li>Git available on the web server</li>
</ul>

<p>I’ll go through some other steps that require you to be working on a *nix computer, but they are not essential and are really for convenience. You should be able to do this from a Windows machine without a problem.</p>

<h2 id="making-life-easier">Making life easier</h2>

<p><em>This section is optional, but it reduces hassle and increases security so why not?</em></p>

<p><strong><a href="https://kb.mediatemple.net/questions/1625/Using+an+SSH+Config+File">Use an SSH config file</a>.</strong> You can set up aliases, default parameters and security options in <code>~/.ssh/config</code>. It’s a real time saver - it basically means you don’t have to provide all the options and switches every time you sign in via SSH to your server. My host provides a jailed shell on port 2222 and for security I like to use a public key for authentication so my config file looks a little like this:</p>

<p><code>
Host mydomain.com
  Port 2222
  PreferredAuthentications publickey
</code></p>

<p><strong>Set up public key authentication.</strong> This increases security on your server by not allowing password access and by installing a certificate on your local computer means you never have to manually authenticate either (unless you choose to password protect your certificate). I won’t go through it here but if you’re interested you can <a href="http://stackoverflow.com/a/9095">learn how to do it</a>.</p>

<h2 id="server-side">Server-side</h2>

<p>Sign in via SSH to your server. You’ll start in your home directory.</p>

<p>Create a folder and initialise a new git repo inside it. You can call it what you like; I gave mine the same name as the domain. </p>

<p><code>bash
$ mkdir mydomain.com
$ cd mydomain.com/
$ git init
Initialized empty Git repository in /home/username/mydomain.com/
</code></p>

<p>A git repository and the filesystem containing the checked-out files from that repository are two different things in different locations on disk. When you push from your computer to a remote repository you will only alter what’s in the remote repository; the checked out files on the server remain unchanged. This is a problem since you need the checked-out files to be updated as well so they can be read by the web server software and served to people visiting your site. This is where <strong>git hooks</strong> come in handy.</p>

<p>Git hooks are scripts that are automatically run when certain events occur in git. In this case we want a script that checks out the latest version to run after the repo receives an update. The hook’s name is <code>post-receive</code>.</p>

<p><code>bash
$ cd .git/hooks/
$ vim post-receive
</code></p>

<p><code>post-receive</code> does not exist by default and so vim should open with a blank file. For the benefit of those not fluent in vim-ese I’ll give blow by blow instructions.</p>

<ul>
  <li>Type ‘i’ to enter Insert Mode</li>
  <li>Paste in the following code:</li>
</ul>

<p><code> bash
#!/bin/sh
GIT_WORK_TREE=../ git checkout -f
</code></p>

<ul>
  <li>Press Escape to exit Insert Mode</li>
  <li>Type ‘:’ followed by ‘w’, ‘q’, and Enter, which should (w)rite the file and (q)uit.</li>
</ul>

<p>The script we just created simply performs a <em>forced checkout</em> which makes sure the state of the checked-out files match the latest version of the repository (i.e. The version just received).</p>

<p>Now it needs to be made executable:</p>

<p><code>bash
$ chmod a+x post-receive 
</code></p>

<p>Finally, we need to configure the repository to accept incoming updates without complaining. By default it’s set up to grumble because without the git hook we just set up, the working tree (checked-out files) and the repository would be out of sync. With the git hook in place this becomes a non-issue.</p>

<p><code>bash
$ git config receive.denyCurrentBranch ignore
</code></p>

<h2 id="connecting-the-dots">Connecting the dots</h2>

<p>Now the server is ready to receive updates we need to tell the local repository about it.</p>

<p>On your local computer:</p>

<p><code>bash
$ git remote add live username@mydomain.com:mydomain.com
</code></p>

<p>This sets up the repository you just set up on your server as a ‘remote’. You can now refer to that repository as <code>live</code>.</p>

<h2 id="doing-it-live">Doing it live</h2>

<p>All that remains now is to push your site live. From your local computer:</p>

<p><code>bash
$ git push live master
</code></p>

<p>That’s it. Whenever you want to publish, from now on that’s all you need to type.</p>

<h2 id="one-more-thing">One more thing</h2>

<p>You may notice that your site isn’t showing up just yet. Log back on to your server. You can see, if you check, in the <code>mydomain.com</code> folder your latest changes are there, but we need to alter the folder that currently contains your website to point to the <code>mydomain.com</code> folder instead.</p>

<p>There will be a folder in your home directory called <code>htdocs</code>, <code>www</code> or <code>public_html</code> containing all the files that currently form your website. I’ll assume it’s called <code>public_html</code>. Make sure there’s nothing in that folder that you haven’t got backed up or that you want to keep - it’s about to be deleted!</p>

<p><code>bash
$ rm -rf public_html/
$ ln -s mydomain.com public_html
</code></p>

<p>This creates a symbolic link from <code>public_html</code> to your repository. Reload the page in your browser and you should see the version you just pushed from git.</p>

<p>Make a small change and try <code>git push live master</code> again. As soon as it has finished you should see the change on your site. Deployments, no matter how large or small, will never be a hassle again.</p>

<h2 id="a-note-on-security">A note on security</h2>

<p>If you navigate to http://mydomain.com/.git you may notice that the contents of your git repository are available for the world to see. Reasons why you might not want this:</p>

<ul>
  <li>Your email address is probably associated with all your commits</li>
  <li>Anyone could download your repository and all of its history</li>
  <li>Your code will be public and it would be easier to find security holes in it</li>
</ul>

<p>I get around this by having all the code to be served in a subfolder of the repository, <code>htdocs</code>, and link to that instead of the main repository folder. Alternatively you could use <code>.htaccess</code> (if you’re running Apache) to block access. Just copy these lines into your <code>.htaccess</code> file:</p>

<p><code>apache
RewriteEngine On
RewriteRule ^(.*/)?\.git+ - [F,L]
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In Defence Of The BBC And Its Clock]]></title>
    <link href="http://blog.norestfortheweekend.com/blog/2013/06/06/in-defence-of-the-bbc-and-its-clock/"/>
    <updated>2013-06-06T23:00:00+01:00</updated>
    <id>http://blog.norestfortheweekend.com/blog/2013/06/06/in-defence-of-the-bbc-and-its-clock</id>
    <content type="html"><![CDATA[<p>The <abbr title="British Broadcasting Corporation">BBC</abbr> has said that due to a single person complaining, <a href="http://www.bbc.co.uk/news/entertainment-arts-22768861">they will be removing the clock from the home page</a>. The news has been reported fairly widely, particularly through technology channels, and people have been very vocal about their feelings on one particular point:</p>

<ul>
  <li>How could it possibly take 100 days to fix the problem?</li>
</ul>

<p>Having worked for the <abbr title="British Broadcasting Corporation">BBC</abbr> for 4 years I would agree on that estimate, and I’ll explain why. First, I need to explain a little about the <abbr title="British Broadcasting Corporation">BBC</abbr> some of the history surrounding the clock.</p>

<h2 id="history">History</h2>

<p>{% img center /images/posts/2013/06/06/in-defence-of-the-bbc-and-its-clock/clocks.jpg 790 592 ‘The <abbr title="British Broadcasting Corporation">BBC</abbr> clock through the ages’ %}</p>

<p>The <a href="https://www.google.co.uk/search?q=bbc+clock&amp;tbm=isch"><abbr title="British Broadcasting Corporation">BBC</abbr> clock</a> has been around for a long time. It has had many incarnations and is an integral part of the <abbr title="British Broadcasting Corporation">BBC</abbr>’s history. It first appeared on BBC1 as an actual clock with a camera pointing at it, and then digital representations in the same style appeared. During a major redesign of the <abbr title="British Broadcasting Corporation">BBC</abbr> home page it was lovingly recreated in Flash as an homage to this iconic timepiece.</p>

<p>A subsequent redesign removed the clock from the home page but due to an outcry from regular visitors to the site it was reinstated, and rewritten to use the modern <code>canvas</code> <abbr title="Hypertext Markup Language">HTML</abbr> element with Flash as a fallback to give the best available experience.</p>

<h2 id="the-trust">The Trust</h2>

<p>The <a href="http://www.bbc.co.uk/bbctrust/"><abbr title="British Broadcasting Corporation">BBC</abbr> Trust</a> is an independent body who governs the <abbr title="British Broadcasting Corporation">BBC</abbr> and is intended to act in the best interests of the licence fee payers (for the benefit of international readers, everyone in the UK who owns a TV must pay a yearly fee which mainly funds the output of the <abbr title="British Broadcasting Corporation">BBC</abbr> which is broadcast ad-free). This basically means that the Trust have final say in matters such as this. A single complaint such as this can out-weigh the opinions of many if the Trust feel that the <abbr title="British Broadcasting Corporation">BBC</abbr> is not upholding its core values.</p>

<p>One of the core values of the <abbr title="British Broadcasting Corporation">BBC</abbr> is to never knowingly broadcast inaccurate information. As the clock is on the <abbr title="British Broadcasting Corporation">BBC</abbr> home page, it looks like that information comes from the <abbr title="British Broadcasting Corporation">BBC</abbr>, and therefore should be accurate. As the time displayed actually comes from the user’s computer it has the potential to be inaccurate and therefore make the <abbr title="British Broadcasting Corporation">BBC</abbr> home page inaccurate, and that is unacceptable.</p>

<h2 id="breaking-down-the-problem">Breaking down the problem</h2>

<p>As the clock has been criticised for its accuracy, a fix that makes it anything less than perfect for every single user would be unacceptable. Here are the facts:</p>

<ol>
  <li>As already established, you can’t trust the user’s clock.</li>
  <li>The site is not restricted to people within a single time zone, the clock will have to display the correct time according to the time zone the user is in.</li>
  <li>As we can’t trust any time information on the user’s computer(1), we can’t rely on their computer to provide a time zone automatically.</li>
  <li>Getting a user’s location by IP address is never 100% accurate, particularly when using mobile broadband so we can’t use that.</li>
  <li>This leaves us with only one option (since we can’t rely on every device having GPS built in) - the user must manually provide their time zone, which can be stored in a cookie or a similar client-side storage mechanism.</li>
  <li>To make the clock accurate if they move time zones, or if they have not yet provided a time zone, the time zone must be displayed along side the clock.</li>
</ol>

<p>Now that the facts are clearer the problem can be broken down.</p>

<p><strong>User Experience &amp; Design</strong>:</p>

<ul>
  <li>How should the time zone be displayed next to the clock?</li>
  <li>How does the user know they can change it?</li>
  <li>How does the interaction to change the time zone work / look?</li>
  <li>Does this all fit within the <abbr title="British Broadcasting Corporation">BBC</abbr>’s <abbr title="User Experience">UX</abbr> guidelines?</li>
</ul>

<p>These are all decisions that will need consideration and questions that will need answering before at least some of the development starts. Design documents will be created in order to accurately pass on the outcome of these decisions to the developers.</p>

<p><abbr title="User Experience &amp; Design">UX&D</abbr> will also perform some user testing to make sure the solution is easy to use and understandable. There may also be accessibility testing to ensure disabled users can still get the most out of the site possible including use of the clock.</p>

<p><strong>Development</strong>:</p>

<ul>
  <li>How do we build this so that the home page retains its current high level of cachability which is necessary for the load the <abbr title="British Broadcasting Corporation">BBC</abbr> experiences?</li>
  <li>How do we deliver the time accurately to the end-user?</li>
  <li>How do we minimise load and rendering times on the home page?</li>
</ul>

<p>When you have a site with as much traffic as the <abbr title="British Broadcasting Corporation">BBC</abbr> there is a strong need for a good caching strategy to avoid overloading the servers and mitigating downtime. When it comes to delivering the time, one option would be to embed it in the body of the page, but this would mean that the cache would have to be regenerated every second which is an inefficient solution. There is the possibility of using post-cache/edge includes to insert the time with placeholders but this would be on every request and even more inefficient.</p>

<p>Logically then, you would need a separate <abbr title="Asynchronous Javascript And XML">AJAX</abbr> call to get the current time. This could result in a short period of time when the clock displayed no time at all before the time had loaded which would look bad. This would have to be referred back to <abbr title="User Experience &amp; Design">UX&D</abbr> for approval.</p>

<p>To serve the accurate time the <abbr title="British Broadcasting Corporation">BBC</abbr> would need to set up one or more time servers capable of handling the constant load of every single person who visited the home page. Not only would the servers need to maintain perfectly accurate time but they would need to deliver it to the user in a fraction of a second wherever they were in the world.</p>

<p>Because any request that took longer than 1 second would make the clock inaccurate there would have to be a series of servers at various locations around the world capable between them of delivering a latency lower than 1 second to any country. This would take some setting up, particularly if you want to defend against <abbr title="Distributed Denial of Service">DDoS</abbr> attacks.</p>

<h2 id="days">100 days?</h2>

<p>Given the complexity of the task, the number of different teams &amp; discipines involved, the infrastucture and the attention to detail required, perhaps 100 days doesn’t seem that mad after all. I don’t think so.</p>

<p><strong>Update 07/06/2013</strong>:</p>

<p>I’ve been made aware of <a href="http://www.ntp.org"><abbr title="Network Time Protocol">NTP</abbr></a>, which provides a mechanism of transmitting an accurate time across a network. However, (according to the FAQ it can take up to 5 minutes to determine the time accurately)[http://www.ntp.org/ntpfaq/<abbr title="Network Time Protocol">NTP</abbr>-s-algo.htm]. This is because it has to make multiple requests to sanity-check the result and ensure latency isn’t affecting the time.</p>

<p>I doubt many people will remain on the home page for 5 minutes and since the page would not have access to set the time of the user’s computer clock the process would have to start from scratch each time the page loaded.</p>

]]></content>
  </entry>
  
</feed>
