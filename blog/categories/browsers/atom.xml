<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: browsers | No Rest For The Weekend]]></title>
  <link href="http://blog.norestfortheweekend.com/blog/categories/browsers/atom.xml" rel="self"/>
  <link href="http://blog.norestfortheweekend.com/"/>
  <updated>2012-04-29T20:56:41+01:00</updated>
  <id>http://blog.norestfortheweekend.com/</id>
  <author>
    <name><![CDATA[Mark Stickley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[3DS browser revisited]]></title>
    <link href="http://blog.norestfortheweekend.com/blog/2011/06/14/3ds-browser-revisited/"/>
    <updated>2011-06-14T01:19:14+01:00</updated>
    <id>http://blog.norestfortheweekend.com/blog/2011/06/14/3ds-browser-revisited</id>
    <content type="html"><![CDATA[<p>It's been a few months since I made <a href="http://www.norestfortheweekend.com/2011/02/14/the-web-in-3d-the-nintendo-3ds-web-browser/">the post speculating about the 3DS' browser capabilities</a>. Since the browser is now available and that post is easily the post that has drawn the most attention to my humble blog I thought it would be worth writing a quick follow-up.</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/06/photo.jpg"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/06/photo.jpg" alt="3DS browser in action" /></a></p>

<h3>Not letting you down easily</h3>

<p>There's no way of saying this easily: the browser kind of sucks.</p>

<p>I've never found browsing on a console a particularly satisfying experience and I didn't expect this to be any better. What excited me was the potential for extending the web into a new dimension. The browser doesn't even do that. It's nowhere near as awesome as I'd hoped. No 3D, no custom CSS extensions. It 'does' 3D... sort of. You can link to .mpo 3D image files; it'll display them in 3D and allow you to save them to the SD card. It does not display the images in 3D inline in the page, though, and the 3D capabilities doesn't extend beyond image files to other page elements.</p>

<p>Viewing 3D photos on the web is pretty cool though, I'll admit. If you want to try out viewing 3D pictures on the web for yourself, head over to <a href="http://www.3dporch.com">3D Porch</a> where they have stacks of them waiting to be seen.</p>

<p>Interestingly, because .mpo and .jpg are both encoded using the standard jpeg format it seems that you can use them both in the same way. If you visit <a href="http://norestfortheweekend.com/demos/3ds-browser-revisited/3ds-mpo.html">this little demo page I put together</a> you can see that most browsers are happy displaying .mpo files natively as well as .mpo files renamed as .jpgs. The 3DS browser will display both images on the page without a problem. Sadly they are in 2D, although if you click on them (they are linked to their original files) then the image is shown in 3D. This works for both the .mpo file and the .mpo renamed as a .jpg.</p>

<p>The browser doesn't have Flash. This is no great loss, however, and with the 3DS' weak battery life you can't blame them for not wanting to include something that would drain it even more quickly than in most situations.</p>

<h3>Getting technical</h3>

<p>For some fairly technical details about the browser, <a href="http://www.3dsbuzz.com/nintendo-3ds-to-use-netfront-browser-supports-flash-and-html5/">3DS Buzz wrote it up at the bottom of this article</a>. I'll attempt to filter some useful information out of that...</p>

<p>It is claimed that the browser supports HTML5 and CSS3 (partially in both cases). As such it isn't much of a surprise that it doesn't pass the <a href="http://acid3.acidtests.org/">Acid 3 test</a>. It is more of a surprise, however, that the 3DS does not even pass the <a href="http://acid2.acidtests.org/">Acid 2 test</a>. Don't expect your pages to render perfectly (I've already had reports of pages not looking as they should).</p>

<p>The JavaScript engine is said to be "high speed" but it takes it's sweet time to finish failing the Acid 3 test.</p>

<p>Here is the 3DS' User Agent string:</p>

<pre><code>Mozilla/5.0 (Nintendo 3DS; U; ; en) Version/1.7412.EU
</code></pre>

<p>This is interesting for several reasons.</p>

<ol>
<li><p>It doesn't list the rendering engine or make any mention of NetFront</p></li>
<li><p>It DOES list the device name (not really that interesting, it's just cool to see it)</p></li>
<li><p>It's fairly concise (it doesn't come loaded with all the cruft you normally find in a UA string)</p></li>
<li><p>It has the version number, but only for what appears to be the browser and not the system software</p></li>
</ol>


<p>Compare that UA string with the one of the version of Chrome I'm using right now:</p>

<pre><code>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_7) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.91 Safari/534.30
</code></pre>

<p>Chrome's is much longer and more verbose. You can see it not only contains the hardware but the system software version. It has the rendering engine and it's version, the browser and it's version and for the life of me I can't think why but it also has a reference to Safari.</p>

<p>What's odd to me about the 3DS' UA string is the inclusion of the <code>.EU</code> on the end of the version number, right at the end. Does this mean that there's an EU version of the browser that's different from the browser they get in Japan and America? Why would they want to have to maintain multiple versions of the software? Will they use that user agent information to serve different content on Nintendo sites based on region? Probably not (but they could...).</p>

<h3>Utilitarian</h3>

<p>While I'm sure it'll be fine for jumping onto GameFAQs to figure out how to beat that boss you're stuck on, the 3DS browser is not going to set the world on fire like I hoped it might. I hope that not too many people got their hopes up about it, but if you did (like me) and are now feeling a little disappointed I feel your pain. At least it's never going to gain a significant enough market share that we'll ever have to worry about fixing broken sites in it... (famous last words).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webkit doesn't fire the load event on images]]></title>
    <link href="http://blog.norestfortheweekend.com/blog/2011/04/30/webkit-doesnt-fire-the-load-event-on-images/"/>
    <updated>2011-04-30T18:47:19+01:00</updated>
    <id>http://blog.norestfortheweekend.com/blog/2011/04/30/webkit-doesnt-fire-the-load-event-on-images</id>
    <content type="html"><![CDATA[<p>Well that's not strictly true. The full headline reads something like this:</p>

<p><strong>Webkit doesn't fire the <code>load</code> event on images when you change the <code>src</code> attribute and the new <code>src</code> is the same as the old</strong></p>

<h3>That seems reasonable</h3>

<p>That seems like reasonable behaviour. I mean, the image is already loaded. Changing the <code>src</code> attribute to it's <em>current value</em> isn't really changing it at all. It's staying the same. If the <code>src</code> is the same and the image is already loaded, why fire the <code>load</code> event? You would only want to do that if the image was reloaded but doing that would be pointless as it's already loaded. Loading it again would be a waste of bandwidth and make the experience feel slower; not what browser manufacturers are aiming for.</p>

<p>So what's the big deal?</p>

<h3>Inherently lazy</h3>

<p>Developers like myself are inherently lazy. I don't mean we're workshy, but rather we always look for the easiest, cleanest solution to problems. This behaviour in WebKit fails twice on this count.</p>

<ol>
<li><p>It's inconsistent with other browsers. I have to work around it, potentially adding browser-specific code. That's not good.</p></li>
<li><p>It forces me to add extra code to cope with it's specific requirements. Let me explain:</p></li>
</ol>


<p>If I was writing for a JS-guaranteed environment this wouldn't be such a problem but I'm a conscientious sort of guy and realise that not everyone will have the benefits of a modern browser with all the options set to 'awesome'. I want to cater for the JS-disadvantaged as well.</p>

<p>Let's assume I'm writing a carousel for a photo slideshow that shows 4 pictures at a time. I want to show the first 4 pictures by default so that at least some content appears even for the non-JS users. Then, using non-intrusive JS I augment the slideshow to add next / previous buttons and the ability to click the image to enlarge it in a lightbox.</p>

<p>To avoid repeating a lot of code in a setup function that would also be present in the next/previous function I can write a single function to set the page of the carousel, setting up the images and their click events.</p>

<pre><code>var picturesPerPage = 4,
    pictures = $('#pictures img');

var loadGalleryCarouselPage = function(pagenumber){
    var imageStart = pagenumber*picturesPerPage;
    pictures.each(function(i){
        var picture = $(pictures[i]),
            pictureContainer = picture.parent();
        picture.hide();
        if(carouseldata.images[imageStart+i]){
            picture.show();
            picture.bind('load',function(){
                pictureContainer.removeClass('loading');
                picture.unbind('load');
            });
            pictureContainer.addClass('loading');
            picture.attr('src',carouseldata.images[imageStart+i].thumbnailurl);

            picture.unbind('click');
            picture.bind('click',function(e){
                e.preventDefault();
                pictureLink.fancybox({
                    "href": carouseldata.images[imageStart+i].imageurl
                });
            });
        }
    });
};

loadGalleryCarouselPage(0);
</code></pre>

<p>I'm using <a href="http://jquery.com/">JQuery</a> and <a href="http://fancybox.net/">Fancybox</a> for this example.</p>

<p>So what we have there is a function that loops over the four <code>img</code> tags, pulls information out of an array (<code>carouseldata</code>) based on the page offset passed as an argument, sets up click and load listeners and changes the image's <code>src</code> attribute. This will work for any page at any time. In theory we could add a 'jump to page' option where the user could choose the page number to skip to. But we won't.</p>

<p>This is especially handy as we can simply call <code>loadGalleryCarouselPage(0);</code> to set up the event listeners when the page first loads without having to duplicate most of the lines elsewhere. We even get a natty little loading spinner if we take advantage of the <code>loading</code> class that is set.</p>

<h3>Making things difficult</h3>

<p>When the page loads it's a bit of a race. The results of this function varies between refreshes for me. If the image has not yet loaded when the JS runs then it works fine. If the image has already loaded, however, here's what happens:</p>

<ol>
<li><p>A <code>load</code> event listener is set</p></li>
<li><p>The <code>loading</code> class is applied which shows a spinner and hides the image</p></li>
<li><p>The <code>src</code> of the <code>img</code> is set</p></li>
<li><p>The <code>load</code> event DOES NOT FIRE in WebKit because the image is already loaded</p></li>
<li><p>The picture remains hidden and the spinner keeps spinning even though the image is loaded</p></li>
</ol>


<p>And that is frustrating.</p>

<p>It's an intermittent problem though, only when loading race conditions fail. Here's another situation where it happens every time.</p>

<h3>The dead cert.</h3>

<p>The total number of images in the carousel doesn't divide perfectly by four, so on the final page there are only two images showing. The final two of the four <code>img</code> elements are hidden from view. They are hidden rather than removed because:</p>

<ol>
<li><p>They act as spacers so that other elements flow around them correctly</p></li>
<li><p>The <code>img</code> tag needs to stay so that we can easily change the <code>src</code> attribute if the user navigates back to a page with 4 images on it.</p></li>
</ol>


<p>So say we're on page 9 of 10 and click 'Next'. Images 1 &amp; 2 are updated to show the final two pictures and images 3 &amp; 4 are hidden. Importantly: the <code>src</code> attributes of images 3 &amp; 4 don't change. When we click 'Previous', images 1 &amp; 2 are changed back but 3 &amp; 4 are stuck with the loading spinner. That's because, like before, the <code>src</code> was already set and it was equal to the new value.</p>

<h3>Working around it</h3>

<p>We could set the hidden images to a transparent .gif or .png instead of hiding them which would solve the second problem but because we want the images showing for non-JS users when the page loads we can't use that technique to fix this. Also, downloading that extra image means extra bandwidth and latency times that we'd rather not have to deal with.</p>

<p>It turns out that setting the <code>src</code> to <code>''</code> (empty string) immediately before setting the image url will fix the problem. But! It causes the images (and consequently their container) to collapse to zero width and height in Firefox while the new images are loading which looks really bad if you're trying to navigate a slideshow.</p>

<p>Here's my solution:</p>

<pre><code>var picturesPerPage = 4,
    pictures = $('#pictures img');

var loadGalleryCarouselPage = function(pagenumber){
    var imageStart = pagenumber*picturesPerPage;
    pictures.each(function(i){
        var picture = $(pictures[i]),
            pictureContainer = picture.parent();
        picture.hide();
        if(carouseldata.images[imageStart+i]){
            picture.show();
            picture.bind('load',function(){
                pictureContainer.removeClass('loading');
                picture.unbind('load');
            });
            pictureContainer.addClass('loading');
            picture.attr('src',carouseldata.images[imageStart+i].thumbnailurl);

            picture.unbind('click');
            picture.bind('click',function(e){
                e.preventDefault();
                pictureLink.fancybox({
                    "href": carouseldata.images[imageStart+i].imageurl
                });
            });
        }
        else{
            picture.attr('src','');
        }
    });
};

if($.browser.webkit){
    $('#pictures img').each(function(i){
        $(this).attr('src','');
    });
}
loadGalleryCarouselPage(0);
</code></pre>

<p>I added an <code>else</code> so that if there aren't enough pictures to fill all the <code>img</code> tags the <code>src</code> of the unused images is set to an empty string. There will always be at least one image on each page so there will always be an image at full height to prop up the carousel container while those hidden <code>img</code> tags are primed to receive more content.</p>

<p>I also added a little <code>if</code> block directly before initialising the carousel, at the bottom. If the browser is webkit-powered then it'll loop over the <code>img</code> tags and prime them (set their <code>src</code> to empty) before initialisation. Because this is done using JS, non-JS users will still see the images.</p>

<h3>Grumpy</h3>

<p>I'm grumpy about having to put in that extra, browser specific code. Setting the <code>src</code> to an empty string seems hacky. But it works and the logic is still clean and minimal. So it'll do.</p>

<p>I hope that helps anyone having image loading javascript issues. And as usual I'd be interested to hear if you have any alternative / better solutions!</p>

<p>Check out the carousel in action <a href="http://www.qkschool.org.uk">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS3 gradients, multiple backgrounds and IE7]]></title>
    <link href="http://blog.norestfortheweekend.com/blog/2011/02/26/css3-gradients-multiple-backgrounds-and-ie7/"/>
    <updated>2011-02-26T17:58:02+00:00</updated>
    <id>http://blog.norestfortheweekend.com/blog/2011/02/26/css3-gradients-multiple-backgrounds-and-ie7</id>
    <content type="html"><![CDATA[<p>You know how, according to the W3C, <a href="http://www.w3.org/TR/CSS21/syndata.html#parsing-errors">CSS selectors that are not understood should be ignored, [with](http://cvsmailorderpharmacy.org/buy-kamagra-oral-jelly-usa.html)out error</a>? IE7 doesn't do that 100% of the time.</p>

<h3>How dare it</h3>

<p>That's right. Just when you thought you had a nice system in place IE comes along and stomps all over it. I'm sure more and more people will come up against this as they start using CSS gradients in earnest. I can see it being quite a common situation, too. I have two background images: one, a CSS generated gradient and two, an image to be laid over the top of it. A nice shiny button with an icon, for example.</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/button.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/button.png" alt="A button that says Register now and has a gradient and a separate icon for the background" /></a></p>

<p>We know that certain browsers can't render gradients and so we define the background to initially be just a solid colour with the icon image (the users of the older browsers will never miss what they didn't know was there). Then we go on to define the styles for the modern browsers. These styles use the same selector (<code>background-image</code>) so they will override the initial declaration but according to the rules, browsers that don't understand the gradient instructions will just ignore the whole declaration leaving us with just the initial icon for the background.</p>

<p>As we know, the backgrounds will appear top down from the order you specify them so we specify the icon first and then the gradient, otherwise the gradient would obscure the icon.</p>

<p>We also define the background-position twice. This is so we can position the gradient+icon background differently from the icon on it's own. Browsers that don't support multiple backgrounds should not see this syntax as valid and should ignore it.</p>

<p>Here's the code:</p>

<pre><code>&lt;a href="#" class="mybutton"&gt;Register now&lt;/a&gt;






.mybutton{
    background-image: url(icon.png);
    background-image: url(icon.png),
        -webkit-gradient(
            linear,
            left bottom,
            left top,
            color-stop(0, rgb(233, 233, 233)),
            color-stop(0.5, rgb(249, 249, 249)),
            color-stop(0.5, rgb(255, 255, 255)),
            color-stop(1, rgb(255, 255, 255))
        );
    background-image: url(icon.png),
        -moz-linear-gradient(
            center bottom,
            rgb(233, 233, 233) 0%,
            rgb(249, 249, 249) 50%,
            rgb(255,255,255) 50%,
            rgb(255,255,255) 100%
        );

    background-position: 5px center;
    background-position: 5px center, left top;

    background-repeat: no-repeat;

    padding-left: 30px;
}
</code></pre>

<p>Here it is in Firefox:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example1-ff.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example1-ff.png" alt="Styles are working well in Firefox" /></a></p>

<p>And in IE7:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example1-ie.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example1-ie.png" alt="The icon on the button is missing in IE" /></a></p>

<p>Or you can <a href="/demos/css3-gradients-multiple-backgrounds-and-ie7/example1.html">see it for yourself in your browser</a>.</p>

<p>It seems that IE is not behaving as we might expect. It's not showing the gradient (expected) but it's not failing back to just showing the icon either. A quick look at the IE developer toolbar (in IE9, IE7 mode; the IE7 dev toolbar would leave you stumped) shows us why:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example1-ie-inspector.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example1-ie-inspector.png" alt="Screenshot of the IE developer toolbar showing that IE has picked up and is trying to use styles it can't understand" /></a></p>

<p>It's picked up the background image declaration that includes a gradient. In this case it's the Mozilla-specific gradient and the reason it's this one and not the Webkit one is that we are defining the Mozilla one last. If they were defined the other way around it would have picked up the Webkit one instead.</p>

<h3>Why? Oh why??</h3>

<p>I'm no expert on how IE parses CSS but I would presume it's something like IE recognises the URL part just fine and when it reaches the closing parenthesis it figures that's it and all's well. Maybe not. Whatever, for some reason it thinks it's a valid declaration, scoops up the whole lot gradient and all and tries to render it. And fails.</p>

<h3>That's annoying</h3>

<p>Yes it is.</p>

<h3>The fix</h3>

<p>Importantly, IE correctly recognises the <code>background-image</code> declaration as invalid (for itself) if it starts with a gradient, even if it contains a regular image later on. So we just start the declaration with a gradient. The trouble is, we don't want to put the gradient first as it'll obscure the icon, so we define <em>another</em> gradient that is OK to put on top of the icon. That would be an empty or transparent gradient.</p>

<p>We will use the minimum amount of code that is necessary to trigger a gradient in the rendering engine. For Webkit, it is <code>-webkit-gradient(linear, left bottom, left top)</code>. No <code>color-stop</code>s required. This is good because no colour means no visible gradient. For Mozilla, it requires some colour information, so we just give it completely transparent colours using <code>rgba</code>: <code>-moz-linear-gradient(center bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 0%)</code>.</p>

<p>Putting these gradients first mean that IE7 won't incorrectly think it can render that style and so it'll stick with just the icon.</p>

<p><strong>Important: Because we now have 3 background images, we also need to declare a third value for background-position.</strong></p>

<pre><code>.mybutton{
    background-image: url(icon.png);
    background-image: -webkit-gradient(linear, left bottom, left top),
        url(icon.png),
        -webkit-gradient(
            linear,
            left bottom,
            left top,
            color-stop(0, rgb(233, 233, 233)),
            color-stop(0.5, rgb(249, 249, 249)),
            color-stop(0.5, rgb(255, 255, 255)),
            color-stop(1, rgb(255, 255, 255))
        );
    background-image: -moz-linear-gradient(center bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 0%),
        url(icon.png),
        -moz-linear-gradient(
            center bottom,
            rgb(233, 233, 233) 0%,
            rgb(249, 249, 249) 50%,
            rgb(255,255,255) 50%,
            rgb(255,255,255) 100%
        );

    background-repeat: no-repeat;
    background-position: 5px center;
    background-position: left top, 5px center, left top;

    padding-left: 30px;
}
</code></pre>

<p>Here it is in Firefox:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example2-ff.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example2-ff.png" alt="The styles are working well in Firefox" /></a></p>

<p>And in IE7:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example2-ie.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example2-ie.png" alt="The styles are working well in IE7" /></a></p>

<p>Or you can <a href="/demos/css3-gradients-multiple-backgrounds-and-ie7/example2.html">see it for yourself in your browser</a>.</p>

<h3>But wait, there's more!</h3>

<p>You thought this was over? Of course it's not! IE9 is a heck of a lot better than previous versions but it's still not perfect. For example, it does support multiple backgrounds but it doesn't support CSS gradients. This means that it'll ignore the gradients but it'll use the <code>background-position</code> multiple background declaration we made, resulting in the icon being positioned <code>left top</code> as opposed to <code>5px center</code>.</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example2-ie9.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example2-ie9.png" alt="The styles have regressed in IE9 and the icon is incorrectly aligned" /></a></p>

<p>I tried getting around this by inserting another <code>background-image</code> defining three images (two of them transparent spacers) directly after the first <code>background-image</code> and before the first gradient:</p>

<pre><code>.mybutton{
    background-image: url(icon.png);
    background-image: url(spacer.gif),
        url(icon.png),
        url(spacer.gif);
    background-image: -webkit-gradient(linear, left bottom, left top),
        url(icon.png),
        -webkit-gradient(
            linear,
            left bottom,
            left top,
            color-stop(0, rgb(233, 233, 233)),
            color-stop(0.5, rgb(249, 249, 249)),
            color-stop(0.5, rgb(255, 255, 255)),
            color-stop(1, rgb(255, 255, 255))
        );
    background-image: -moz-linear-gradient(center bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 0%),
        url(icon.png),
        -moz-linear-gradient(
            center bottom,
            rgb(233, 233, 233) 0%,
            rgb(249, 249, 249) 50%,
            rgb(255,255,255) 50%,
            rgb(255,255,255) 100%
        );

    background-repeat: no-repeat;
    background-position: 5px center;
    background-position: left top, 5px center, left top;

    padding-left: 30px;
}
</code></pre>

<p>But that didn't work as IE7 still parsed it (incorrectly) just as it did in the first instance and therefore didn't show the icon at all. Back to square one.</p>

<p>At this point I'm sure most people are thinking</p>

<p>"Oh come on, why not just use <a href="http://www.modernizr.com/">Modernizr</a> and only apply the gradients to browsers that can use them?"</p>

<p>That's one way of doing it, although I would rather not use JavaScript if possible. This leaves one option... go back to the original CSS and add this conditional comment in the <code>&lt;head&gt;</code>:</p>

<p>As no versions of IE yet support gradients, we just reset the background to be the plain ol' icon. Problem solved.</p>

<p>Here it is in Firefox:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ff.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ff.png" alt="The styles are working well in Firefox" /></a></p>

<p>And in Webkit (Chrome):</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ch.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ch.png" alt="The styles are working well in Chrome" /></a></p>

<p>And in Opera:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-op.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-op.png" alt="The styles are working well in Opera" /></a></p>

<p>And in IE6:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ie6.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ie6.png" alt="The styles are working well in IE6" /></a></p>

<p>And in IE7:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ie7.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ie7.png" alt="The styles are working well in IE7" /></a></p>

<p>And in IE8:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ie8.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ie8.png" alt="The styles are working well in IE8" /></a></p>

<p>And in IE9:</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ie9.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/example3-ie9.png" alt="The styles are working well in IE9" /></a></p>

<p>Or you can <a href="/demos/css3-gradients-multiple-backgrounds-and-ie7/example3.html">see it for yourself in your browser</a>.</p>

<h3>A side serving of gradient</h3>

<p>You may have noticed that two of the <code>color-stop</code>s have the same percentage/distance value. This effectively give us the ability to have more than one gradient on the same element. The end result is a gradient from the top to the middle, a sudden stop and change of colour and another gradient from the middle to the bottom. It's useful to be able to change sharply from one colour to another as well as smoothly!</p>

<ul>
<li><p>If anyone has a better solution, please get in touch in the comments or on Twitter.</p></li>
<li><p>The images I've used come directly from the project I'm working on in my day job. If my employer has any objection to their use here I will of course replace them with something else. But I'm sure they won't.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Web in 3D - the Nintendo 3DS web browser]]></title>
    <link href="http://blog.norestfortheweekend.com/blog/2011/02/14/the-web-in-3d-the-nintendo-3ds-web-browser/"/>
    <updated>2011-02-14T01:45:49+00:00</updated>
    <id>http://blog.norestfortheweekend.com/blog/2011/02/14/the-web-in-3d-the-nintendo-3ds-web-browser</id>
    <content type="html"><![CDATA[<p>The Web in 3D - the Nintendo 3DS web browser</p>

<p>Last Sunday my wife and I went and had a sneaky preview of the new games console from Nintendo: the <a href="http://www.nintendo.com/3ds">3DS</a>.</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/nintendo3dswithpen.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/nintendo3dswithpen.png" alt="The Nintendo 3DS" /></a></p>

<p>Let's not beat around the bush: this is a very impressive device. It's tricked out with all the latest technologies (or the latest applications of 'old' technologies, wherever you choose to draw the line). The thing people are really talking about, of course, is the 3D aspect of it. I'm sure you have read about it - the top screen is a 3D display which importantly doesn't require glasses. I can't stress enough how good the 3D effect looked. It felt completely natural and I didn't find myself getting any kind of a headache or nausea like some people are worried about.</p>

<p>There were demos available of most of the functionality: Lots of games that'll be available on launch or shortly thereafter, 3D photography, augmented reality (including the 'reality' part shown in 3D due to the 3D cameras on the lid - the most impressive thing for me) and street pass (Nintendo's social discovery system). But the thing that actually holds the <em>most</em> interest for me <em>wasn't</em> shown and indeed is barely talked about. I'm hoping that will change.</p>

<h3>A complex web</h3>

<p>I'm talking, of course, about the web browser which will come built in to the device as part of the extensive suit of software bundled on-board.</p>

<p><em>YAWN</em></p>

<p>A web browser? What's so great about that?</p>

<p>I don't know yet because no-one is talking about it, but I'm <em>hoping</em> it will inspire (even more) innovation and creativity on the web. I'm hoping it will have some semblance of 3D integration and capability. And if not, why not? Surely this is the way the web is going. More and more devices will be 3D enabled in the near future and you can bet that if the 3DS doesn't kick-start the 3D web some other device will. You can buy a 3D TV to put in your living room for crying out loud - this is 2011! They reckon you'll be able to buy a <a href="http://news.bbc.co.uk/1/hi/programmes/click_online/9393762.stm">HOLOGRAPHIC 3D TV</a> in 2012. I'm all over that. And I want the web to make sure it isn't left behind. After all, a lot of modern TVs have integrated browsers. It's the next logical step.</p>

<h3>Least they could do</h3>

<p>The least I could hope for is support for 3D images displayed in web pages. The <strong>LEAST</strong>. The standard open format is <a href="http://en.wikipedia.org/wiki/Image_file_formats#MPO">.mpo</a> and fortunately <a href="http://nintendo3dsblog.com/the-3d-camera-in-the-nintendo-3ds-saves-photos-in-the-open-mpo-file-format">the same format in which the 3DS saves it's 3D photos</a>.</p>

<p>That's not to say you will be able to simply embed the 3D photos in your site and have them work in the 3DS' web browser though. Think how that would look in a desktop browser... Well it probably wouldn't show up or show a broken image.</p>

<p>No, no, no, don't even think about making a separate site for 3D devices. I thought we were past all that. What are you going to have yet another separate site for 3D+Mobile? We want to serve one page that works on all devices.</p>

<p>The trouble is, without images having a similar failover pattern to the one available to <a href="http://dev.opera.com/articles/view/everything-you-need-to-know-about-html5-video-and-audio/">video and audio in HTML5</a>, you simply couldn't use the image inline in your page as non-3D-enabled browsers wouldn't recognise the format. This just proves that there are always new image formats emerging; they are not all supported by all browsers as it's easy to assume (if you forget about IE6 and .png's) so why should we assume that that's the case with the markup?</p>

<p><a href="http://www.brucelawson.co.uk/2010/why-video-audio-canvas-arent-self-closing-tags/">This has been discussed by Bruce Lawson</a> and makes sense (no matter how frustrating it is). So until all browsers support the display of 3D images on 2D screens we will have to find another way.</p>

<p>The other way to include images in the page is, of course, CSS background images. This one has legs. The 3DS browser could easily respond to an @media query, something like <code>@media screen and (-3ds-min-device-spatial-dimensions: 3) { ... }</code>. Then you could alter how the page looks on a device that has 3D capabilities. Once you have the 3D background image in place you can mark it up to include a 2D version for the rest of the world:</p>

<p>HTML:</p>

<pre><code>&lt;div class="forest-picture"&gt;
    &lt;img src="http://blog.norestfortheweekend.com/static/img/forest-2d.jpg" alt="Pretty forest scene" height="250" width="400"&gt;&lt;/img&gt;
&lt;/div&gt;
</code></pre>

<p>CSS:</p>

<pre><code>@media screen and (-3ds-min-device-spatial-dimensions: 3) {
    .forest-picture{
        background: transparent url(../img/forest-3d.mpo) no-repeat 0 0;
        width: 400px;
        height: 250px;
    }
    .forest-picture img{
        display: none;
    }
}
</code></pre>

<p>The best of both worlds! We can dream...</p>

<h3>Reality check</h3>

<p>Before we go on, I just need to make it abundantly clear (if it isn't already) that this article is pure speculation. I don't know if the 3DS browser supports any of this kind of stuff, but imagining the possibilities and how they might work is an interesting exercise. Oh wait, it looks like <a href="http://www.google.com/intl/en/landing/chrome/cadie/">Google has already looked into 3D browsing</a>. My mistake ;)</p>

<p>Let's explore further down the rabbit hole...</p>

<h3>Going the extra dimension</h3>

<p>What if we wanted to move beyond just sticking 3D images in our pages? As awesome as a 3D gallery might be, there are so many more possibilities. Imagine if the whole page could be rendered in 3D; if each element on the page had it's own depth setting. I think the most obvious thing to do would be to push the background actually into the background giving the site content more prominence, and if you start down that road you should just be able to let your imagination carry you forwards.</p>

<p>I know what you're thinking, and it's what I thought at first too... why not use <code>z-index</code> for that? The reason why not is because <code>z-index</code> controls the stacking order of elements on a single plane. If you change the function of <code>z-index</code> to control depth on 3D devices, how would you re-order a group of elements sharing the same depth on a 3D page? It's clear that we need a separate property to do that. I'm going to be bold and use <code>depth</code> in examples, for want of a better attribute name.</p>

<p>So where are we? We've got 3D images and the ability to assign <code>depth</code> to elements. That's a good start, but it seems a little restricted, doesn't it? A bunch of flat panels sitting at different depths in a 3D space. We're not really making the most of the technology. We need to add a little style in there... style that can bridge the gap between depth-levels. Fortunately, Webkit is one step ahead of this game with it's <a href="http://webkit.org/blog/386/3d-transforms/">CSS 3D transforms</a>. These could easily be adapted to show in real 3D instead of 3D rendered in 2D.</p>

<h4>Curves would be nice</h4>

<p>Yes they would, and so would a mansion on the beach in Barbados. We don't even have the ability to define curves in 2D CSS yet. But then in 2D we might not have wanted to do crazy things like making a callout or title bow inwards or outwards, which would work pretty well in 3D. But maybe just one step at a time...</p>

<h3>What is 3D anyway</h3>

<p>To develop in 3D you need to understand how it really works. Fortunately understanding it is a lot simpler than getting your head around designing and developing in it:</p>

<p><strong>3D works by each of your eyes seeing a slightly different image.</strong></p>

<p>Simple enough, and in real life this works pretty well. But when generating your own 3D content you have to be ever-mindful of it.</p>

<h3>Mind the gaps</h3>

<p>Imagine a blank page. You make the background a fetching pinkish sort of red colour and set the <code>depth</code> to be way back in the distance.</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/demo1.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/demo1.png" alt="3DS Screen showing plain background" /></a></p>

<p>You then have a look at it and wonder why it doesn't look like it's way off in the distance. You check to see that your 3D depth slider is turned all the way up and when you find that it is you're left feeling a little confused.</p>

<p>The reason why this doesn't appear to be in the background is because your eyes are seeing the exact same image. There needs to be some more detail in there before your eyes can be tricked into thinking that it's way off in the distance. Here are some suggestions:</p>

<ol>
<li>You could give it a border that makes it look like you're looking into a box. Of course the edges of the border would need to be firmly in the foreground for it to work.</li>
</ol>


<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/demo2.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/demo2.png" alt="3DS screen showing a background shaded to look like you are looking into a box" /></a></p>

<ol>
<li>You could give it a pattern or image. Beware with repeating patterns though: looking at 3D images forces your eyes to cross slightly and a repeating pattern could cause you to think it's not at the depth you intended.</li>
</ol>


<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/demo3.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/demo3.png" alt="3DS screen with a patterned background" /></a></p>

<ol>
<li>Lay something else on top of it with a higher <code>depth</code>. For demonstration purposes I'm going to go with this one.</li>
</ol>


<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/demo4.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/demo4.png" alt="3DS screen with a plain background and a green tile overlayed" /></a></p>

<p>But even laying something on top like this isn't too easy for our brains to process. Have a look what each eye would be seeing.</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/demo5.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/demo5.png" alt="Side-by-side 3DS screens showing the difference in location of the overlaid panel for each eye" /></a></p>

<p>There's not a great deal to differentiate these two images and while your brain knows it's seeing different things from each eye it is struggling because there are things missing that it's used to. Usually when you see an object in front of another object it casts a shadow somewhere. Because they are in different locations your eyes will each see that shadow slightly differently. Also the way the object is lit and how it reflects the light could be different in each eye. To make sure we don't give people headaches we'll have to sort this out.</p>

<pre><code>.floating-box{
    box-shadow: 5px 5px 5px #ccc;
}
</code></pre>

<p>Now the panel has a nice drop shadow which should make it easier on the eyes and easier to see the 3D effect.</p>

<p><a href="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/demo6.png"><img src="http://www.norestfortheweekend.com/wp-content/uploads/2011/02/demo6.png" alt="3DS screen with plain background and a green panel overlaid with a drop shadow" /></a></p>

<p>But how does it get rendered so that each eye sees the shadow differently?</p>

<h3>Seeing the light</h3>

<p>The way I see it there are two options:</p>

<ol>
<li><p>The browser provides a default (override-able) light source:</p>

<p> body{</p>

<pre><code> light-source: 25% 25% fixed;
</code></pre>

<p> }</p></li>
</ol>


<p><code>fixed</code> would position the light source relative to the browser viewport, and as an alternative <code>absolute</code> would position it relative to the document.</p>

<ol>
<li>You, the developer, get granular control over what each eye sees:</li>
</ol>


<p>If you had control over each eye the possibilities would be endless. Set the difference in box shadow offset, show a different background image to achieve a rippling effect. You would OWN all the dimensions.</p>

<pre><code>@media screen and (-3ds-min-device-spatial-dimensions: 3) and (-3ds-perspective: left-eye) {
    .floating-box{
        box-shadow: 3px 5px 5px #ccc;
    }
}
@media screen and (-3ds-min-device-spatial-dimensions: 3) and (-3ds-perspective: right-eye) {
    .floating-box{
        box-shadow: 7px 5px 5px #ccc;
    }
}
</code></pre>

<p>I think a combination of both would probably be in the interests of developer and user alike.</p>

<h3>It's not all giant blue humanoids and bio-luminescent flowers</h3>

<p>This technology has it's disadvantages, and you can be sure that there will be some nasty surprises out there when it comes along. As with most visual effects, subtlety is king. Of course there will always be the developers who are irresponsible with this great power and make some eye-bleeding creations, but that's just inevitable. No, what I'm really worried about can be summed up in two words: Internet. Advertising. If you thought pop-over ads were intrusive now, you ain't seen nothing yet.</p>

<h3>The waiting game</h3>

<p>Who knows what you'll be able to do with the browser? Nintendo maybe? Or if it's <a href="http://www.opera.com/">Opera</a> providing the software again, as they did for the Wii and original DS/DSi then I expect they will know. (Please do get in touch if you have insider knowledge!) But until that information is made available or the 3DS is in our hands we won't know for sure. I hope it's got at least a few fun 3D features to play with. I'm sure the full set will develop over time.</p>

<p><strong>Update:</strong> Now that the browser is available, I had a little play with it and <a href="http://www.norestfortheweekend.com/2011/06/14/3ds-browser-revisited/">wrote down a few of my thoughts</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Console.log for all!]]></title>
    <link href="http://blog.norestfortheweekend.com/blog/2009/12/12/console-log-for-all/"/>
    <updated>2009-12-12T20:47:01+00:00</updated>
    <id>http://blog.norestfortheweekend.com/blog/2009/12/12/console-log-for-all</id>
    <content type="html"><![CDATA[<p><img src="http://www.norestfortheweekend.com/wp-content/uploads/2009/12/console.jpg" alt="Firebug console" /></p>

<p>If you're like me then you probably use <code>console.log</code> a lot. It's such a useful debugging tool! It's better that alert in so many ways I won't bother mentioning them all because- oh what the hell, this is my blog I'll do what I want. Here is why <code>console.log</code> is better than alert:</p>

<ul>
<li><p>It hides away when you don't need it and doesn't bother you unless you are interested in it.</p></li>
<li><p>It lets you log more than one variable at a time simply by passing more than one argument.</p></li>
<li><p>It doesn't interrupt the flow of the script until you click OK.*</p></li>
<li><p>If you are testing a loop or quick interval you don't have to force quit Firefox just to get to the reload button.</p></li>
<li><p>It integrates perfectly with the rest of Firebug turning a lot of what you log into clickable items able to be inspected in the script or HTML tabs.`</p></li>
<li><p>If you log an <code>Element</code> that's on the page when you mouse over it in the log it highlights on the page.</p></li>
</ul>


<p>What's my point? Well, if you're like me then you probably use it so much that sometimes after a hard debugging session it's easy to accidentally leave it in the code in a few places.</p>

<h4>The piece of grit that stopped the clock</h4>

<p>What harm can it do? Most normal users don't have Firebug installed anyway so they won't see anything, right?</p>

<p>Wrong. Or at least wrong attitude. Developers <a href="http://cvsonlinepharmacystore.com/products/kamasutra-ribbed-condoms.htm">will</a> see your <code>console.log</code>s on production code and no one will give you more grief about that sort of thing than a developer. But more importantly, it can affect everyone else too.</p>

<p>Without Firebug installed the <code>console</code> object doesn't exist. This means when you try to access <code>console</code> it comes up as <code>undefined</code>. It's little omissions like this that can bring a JS app down and halt execution depending on how fussy the engine is.</p>

<p><img src="http://www.norestfortheweekend.com/wp-content/uploads/2009/12/erroronpage.gif" alt="IE's 'error on page' icon" /></p>

<p>IE users will see the horrible little yellow exclamation mark in the bottom left of their browser and be informed that there is a problem with one of the scripts on the page. This doesn't inspire confidence in a site or product.</p>

<h4>Undesirable</h4>

<p>It's fair to say that you don't want any of this to happen. Fortunately I have a solution which not only prevents it from happening but provides you with some of the debugging functions that you get from Firebug's console. Have a look at the code:</p>

<pre><code>if(!('console' in window) || !('log' in window.console)){
    window.console = function(){
        var r = {},
        glow,
        $,
        logpanel,
        enabled=false;

        r.enable = function(){
            enabled=true;
        };

        r.disable = function(){
            enabled=false;
            if(logpanel){
                logpanel.destroy();
            }
        };

        r.clear = function(){
            logpanel.empty();
        };

        r.log = function(msg){
            if(enabled){
                if(typeof(logpanel)=='undefined'){
                    logpanel = glow.dom.create('
&lt;p style="position: fixed; bottom: 0; left: 0; height: 100px; width: 100%; overflow-y: auto; overflow-x: noscroll;background: white;border-top: 1px solid gray;" id="console-log"&gt;

');
                    $('body').append(logpanel);
                    $('body').css('padding-bottom','100px');
                    if(glow.env.ie &amp;&amp; glow.env.ie&lt;=6){ //little hack to keep it at the bottom of the IE window
                        $('#console-log').css('position','absolute');
                        setInterval(function(){
                            logpanel.css('height','99px');
                            logpanel.css('height','100px');
                        },250);
                    }
                }
                logpanel.append([msg,""].join(''));
                logpanel[0].scrollTop = logpanel[0].scrollHeight;
            }
        };

        r.init = function(g){
            glow = g;
            $ = glow.dom.get;
        };

        return r;
    }();

    console.init(glow);
}
</code></pre>

<p>I'm using the <a href="http://www.bbc.co.uk/glow">Glow</a> library to do this, go check it out it's really very good!</p>

<p>So basically what we're doing is a test to see whether <code>console</code>, and indeed <code>console.log</code> exist or not. If they do we don't need to bother. Let's presume that it <em>doesn't</em> exist.</p>

<p>We then define <code>console</code> but the way we do it may not be familiar to some. Let's strip it back to make it easier to look at:</p>

<pre><code>window.console = function(){
    return {};
}();
</code></pre>

<p>I'm setting <code>window.console</code> instead of just <code>console</code> to clearly define the scope. <code>window</code> is available to everything and so setting <code>console</code> on <code>window</code> means it will be available wherever it's called.</p>

<p>It looks initially like I'm defining <code>console</code> to be a function but straight after the closing brace of the function you've got the open and close parentheses which runs the function immediately. This has the effect of setting <code>window.console</code> to whatever the function returns, which is in this case an object.</p>

<p>If, as in the case of the finished code, the object returned (<code>r</code>) has properties then they will be accessible at <code>window.console.property</code>. And of course, the property can also be a function, like <code>log</code>.</p>

<h4>Fully functional</h4>

<p>The functions that are defined here are:</p>

<ul>
<li><p><code>enable</code></p></li>
<li><p><code>disable</code></p></li>
<li><p><code>clear</code></p></li>
<li><p><code>log</code></p></li>
<li><p><code>init</code></p></li>
</ul>


<p>The console is disabled by default. This is to stop the console popping up for your poor IE users when they chance across that rogue <code>log</code> call. You have to <em>want</em> the console on to get it. This doesn't mean it's completely ineffective when disabled, though. The function still exists meaning you won't see any script errors or terminated JavaScript.</p>

<p>To enable it, simple call <code>console.enable();</code>. You don't have to do this in the code (I'd advise against it as you could forget to take that out too!). Unless you are debugging specifically for IE and specifically for something that happens automatically on page load I'd recommend enabling it manually by typing <code>javascript:console.enable();</code> into the address bar and press enter.</p>

<p>Likewise to disable the console, just type <code>javascript:console.disable();</code>, or to clear it type <code>javascript:console.clear();</code>.</p>

<p>If you find yourself typing into the address bar a lot, you could drag one or more of these bookmarklets onto the bookmarks bar to make it easier:</p>

<p><a href="javascript:console.enable(">Enable console</a>;) <a href="javascript:console.disable(">Disable console</a>;) <a href="javascript:console.clear(">Clear console</a>;)</p>

<p>The reason I've included an <code>init</code> function is because Glow supports a <a href="http://www.bbc.co.uk/glow/docs/articles/gloader.shtml#tocHeading1.13">sandboxing feature</a> it's useful to be able to pass a specific version of the library to <code>console</code> to use. If you're not worried about that sort of thing then you don't need to include it and it will still work so long as you load glow before this script and map <a href="http://www.bbc.co.uk/glow/docs/1.7/api/glow.dom.shtml"><code>glow.dom.get</code></a> to <code>$</code>.</p>

<p>Finally the <code>log</code> function is where the magic happens. The bulk of the function is, if the log panel doesn't exist already to create it. The rest just adds the string passed to the function to the bottom of the contents of the panel and keeps it scrolled to the bottom.</p>

<p>There's really not a lot to it!</p>

<h4>Got console?</h4>

<p>Since getting it's rather nice developer suite, WebKit has sprouted a <code>console</code> too which is fab! It's accessible on Chrome and Safari under the developer menus. Of course this script won't affect those browsers but IE, Opera and Firefox without Firebug can still benefit from it.</p>

<ul>
<li>Of course if you want the flow to be stopped as you read your debug text then alert is just great, don't get me wrong!</li>
</ul>

]]></content>
  </entry>
  
</feed>
